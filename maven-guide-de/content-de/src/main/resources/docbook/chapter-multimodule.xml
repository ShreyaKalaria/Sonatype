<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="multimodule">
  <title>Ein multi-modulares Projekt</title>

  <section id="multimodule-sect-intro">
    <title>Einleitung</title>

    <para>In diesem Kapitel werden wir ein Multi-Modul Projekt erstellen,
    welches die Beispiele der beiden vorangegangenen Kapitel verbindet. Die
    "<varname>Simple Weather</varname>" Anwendung von <xref
    linkend="customizing" /> (Kapitel 4: "Anpassen eines Maven Projekts") wird
    verbunden mit der "<varname>Simple Web</varname>" Applikation von <xref
    linkend="web" /> (Kapitel 5: "Eine einfache Web-Anwendung"), mit dem
    Ergebnis einer Web Anwendung welche die Wetterdaten zu einer gegebenen
    Postleitzahl abruft und die Wettervorhersage auf einer Webseite darstellt.
    Am Ende dieses Kapitels werden Sie in der Lage sein, unter Verwendung von
    Maven komplexe, multi-modulare Projekte zu entwickeln.</para>

    <section id="multimodule-sect-downloading">
      <title>Herunterladen der Beispiele dieses Kapitels</title>

      <para>Das multi-modulare Projekt welches wir in diesem Kapitel erstellen
      werden, besteht aus modifizierten Versionen der Projekte der
      vorhergehenden Kapitel: <xref linkend="customizing"
      xrefstyle="select: labelnumber" /> (Kapitel 4: "Anpassen eines Maven
      Projekts") sowie <xref linkend="web" xrefstyle="select: labelnumber" />
      (Kapitel 5: "Eine einfache Web-Anwendung"). Wir werden dieses
      multi-modulare Projekt nicht mit dem Archetype Maven Plugin generieren.
      Wir empfehlen Ihnen eine Kopie der Beispiel-Code als zusätzliche
      Referenz beim Lesen der Inhalte in diesem Kapitel herunterzuladen. Das
      Beispielprojekt dieses Kapitels zusammen mit den anderen Beispielen aus
      diesem Buch kann von <link
      linkend="???">http://books.sonatype.com/maven-book/mvn-examples-1.0.zip</link>
      oder <link
      linkend="???">http://books.sonatype.com/maven-book/mvn-examples-1.0.tar.gz</link>
      heruntergeladen werden. Entpacken Sie das Archiv in ein beliebiges
      Verzeichnis, und gehen Sie dann zum Verzeichnis
      <filename>/ch06</filename>. Darin finden Sie ein Verzeichnis mit dem
      Namen <filename>/simple-parent</filename> welches das multi-modulare
      Projekt dieses Kapitels enthält. Innerhalb des Verzeichnisses
      <filename>/simple-parent</filename> werden Sie auf eine
      <filename>pom.xml</filename>-Datei sowie zwei Unterverzeichnisse
      <filename>/simple weather</filename> und <filename>/simple web
      app</filename> stossen welche den Quellcode für dieses Kapitel
      enthalten.</para>
    </section>
  </section>

  <section id="multimodule-sect-simple-parent">
    <title>Das "Simple Parent" Projekt (parent=Elternteil)</title>

    <para>Ein multi modulares Projekt wird durch ein
    "Eltern"-<acronym>POM</acronym> und dessen referenzierende Submodule
    definiert. Im Verzeichnis <filename>/simple-parent</filename> finden Sie
    die "Eltern" <acronym>POM</acronym> Datei <filename>pom.xml</filename>,
    auch das 'top-level' <acronym>POM</acronym> genannt,</para>

    <example id="ex-multimodule-parent-pom">
      <title>simple-parent Projekt POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 6 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;

</programlisting>
    </example>

    <para>Wie Sie sehen, definiert das top-level POM die Maven Koordinaten
    <varname>groupId</varname> als <varname>com.sonatype.maven</varname>,
    <varname>artifactId</varname> als <varname>simple-parent</varname> und
    <varname>version</varname> als <varname>1.0</varname>. Das top level POM
    definiert keinen Ausgabetyp JAR- oder WAR-Archiv wie das bislang der Fall,
    sondern bezieht sich auf andere Maven Projekte. Das entsprechende Element
    <varname>package</varname> eines top level POM welches lediglich ein
    Projekt Objekt Modell darstellt, ist '<emphasis>pom</emphasis>'. Der
    nächste Abschnitt in der <filename>pom.xml</filename>-Datei führt die
    Sub-Module auf. Diese Module werden im Element <varname>module</varname>
    aufgeführt, und befinden sich je in einem eigenen Unterverzeichnis. Maven
    kennt diese Struktur und sucht in den Unterverzeichnissen nach weiteren
    <filename>pom.xml</filename>-Dateien. Diese werden dann in die Liste der
    Maven Projekte des Builds aufgenommen.</para>

    <para>Zuletzt setzen wir eine Anzahl Einstellungen welche von allen
    Untermodulen geerbt werden. Das "<varname>Simple Parent</varname>" Modul
    setzt die Zielplattform aller Untermodule als Java 5 Plattform. Da das
    Compiler-Plugin standardmässig an den Lebenszyklus gekettet ist, können
    wir den Abschnitt <varname>pluginManagement</varname> hierzu benutzen. Wir
    werden <varname>pluginManagement</varname> später im Detail beleuchten,
    für den Moment ist es einfacher, diese Trennung zwischen Bereitstellung
    von Plugin Standard-Konfigurationen und dem tatsächlichen 'binden' der
    Plugins darzustellen wenn sie auf diese Weise getrennt werden. Das Element
    <varname>dependency</varname> fügt als globale Abhängigkeiten JUnit 3.8.1
    ein. Sowohl die Konfiguration sowie die Abhängigkeiten werden von allen
    Untermodulen geerbt. Der Einsatz der POM Vererbung erlaubt es Ihnen,
    gemeinsam genutzte Abhängigkeiten, wie z.B. JUnit oder Log4J, universell
    zu definieren.</para>
  </section>

  <section id="multimodule-sect-simple-weather">
    <title>Das "Simple Weather" Modul</title>

    <para>Das erste Untermodul welches wir uns genauer ansehen wollen, ist das
    Untermodul "<varname>Simple Weather</varname>". Dieses Modul enthält alle
    Klassen, welche zum Abrufen und Verarbeiten des Yahoo! Wetterdienstes
    benötigt werden.</para>

    <example>
      <title>POM des Untermodul "Simple-Weather"</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 6 Simple Weather API&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
      &lt;version&gt;1.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Im <acronym>POM</acronym> des Moduls "<varname>Simple
    Weather</varname>" sehen wir, wie dieses Modul die elterlichen Koordinaten
    in Form von Maven Koordianten referenziert. Das elterliche POM enthielt
    die Koordinaten <varname>groupId</varname>
    <varname>com.sonatype.maven</varname>, <varname>artifactId</varname>
    <varname>simple-parent</varname> sowie <varname>version</varname>
    <varname>1.0</varname> Beachten Sie hier, dass wir weder die Koordinate
    <varname>groupID</varname> noch <varname>version</varname> definieren
    müssen, diese sind bereits im "elterlichen" POM definiert.</para>

    <example id="multimodule-weather-service">
      <title>Die Klasse WeatherService</title>

      <programlisting language="java">package org.sonatype.mavenbook.weather;

import java.io.InputStream;

public class WeatherService {

    public WeatherService() {}

    public String retrieveForecast( String zip ) throws Exception {
        // Retrieve Data
        InputStream dataIn = new YahooRetriever().retrieve( zip );

        // Parse Data
        Weather weather = new YahooParser().parse( dataIn );

        // Format (Print) Data
        return new WeatherFormatter().format( weather );
    }
}
</programlisting>
    </example>

    <para>Die Klasse <classname>WeatherService</classname> ist unter
    <filename>/src/main/java/de/sonatype/Maven/Weather</filename> definiert,
    und ruft lediglich die drei in <xref linkend="customizing" /> (Kapitel 4:
    "Anpassen eines Maven Projekts") definierten Objekte auf. Im Beispiel
    dieses Kapitels, erstellen wir ein separates Projekt, welches
    Service-Objekte bereitstellt, die vom Web-Applikations Projekt
    angesprochen werden. Dies ist ein gewöhnliches Pattern von Enterprise
    Anwendungen. Oftmals besteht eine komplexe Anwendung aus weit mehr als
    einer einzigen (einfachen) Web-Applikation. Eine solche Anwendung könnte
    aus einer Reihe von Web Anwendungen sowie weiteren
    Befehlszeilenanwendungen bestehen. Sie werden in diesem Fall die
    gemeinsame Logik in einer Service Klasse zusammenfassen und für eine
    Anzahl Projekte als Dienst bereitstellen. Dies gibt uns eine
    Rechtfertigung für die Erstellung einer Klasse
    <classname>WeatherService</classname>. Sie können daran sehen, wie die
    "<varname>Simple Web</varname>" Anwendung auf die bereitgestellten Service
    Objekte welche in "<varname>Simple Weather</varname>" bereitgestellt
    werden zugreift.</para>

    <para>Die Methode <methodname>retrieveForecast()</methodname> hat einen
    Parameter Postleitzahl. Dieser wird an die Methode
    <methodname>retrieve()</methodname> der Klasse
    <classname>YahooRetriever</classname> gegeben, welche das entsprechende
    XML-Fragment beim Yahoo Wetter Dienst einholt. Das erhaltene XML wird an
    die Methode <methodname>parse()</methodname> übergeben, welche ein Objekt
    <classname>Weather</classname> zurückgibt. Das Objekt
    <classname>Weather</classname> wird dann in Form einer lesbaren,
    formatierten Zeichenkette ausgegeben.</para>
  </section>

  <section id="multimodule-sect-simple-web">
    <title>Das "Simple-Web" Anwendungs-Modul</title>

    <para>Das Untermodul "<varname>Simple Web</varname>" ist das zweite,
    referenzierte Sub-Modul des Projekts. Das darin enthaltene
    Web-Anwendungsprojekt ist vom Untermodul
    <classname>WeatherService</classname> abhängig und es enthält einige
    einfache Servlets zur Präsentation der Ergebnisse der Yahoo! Wetterdienst
    Abfrage.</para>

    <example>
      <title>POM des Untermodul "Simple-Webapp"</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>Das "<varname>Simple Web</varname>" Modul definiert ein einfaches
    Servlet, welches eine Postleitzahl aus einem HTTP-Request ausliest, den
    <classname>weatherService</classname> aus <xref
    linkend="multimodule-weather-service" /> (Beispiel 6.3: "Die klasse
    WeatherService") aufruft, und das Resultat auf den
    <classname>Writer</classname> schreibt.</para>

    <example>
      <title>Simple-Webapp WeatherServlet</title>

      <programlisting language="java">package org.sonatype.mavenbook.web;

import org.sonatype.mavenbook.weather.WeatherService;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class WeatherServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
        throws ServletException, IOException {
        String zip = request.getParameter("zip" );
        WeatherService weatherService = new WeatherService();
        PrintWriter out = response.getWriter();
        try {
            out.println( weatherService.retrieveForecast( zip ) );
        } catch( Exception e ) {
            out.println( "Error Retrieving Forecast: " + e.getMessage() );
        }
        out.flush();
        out.close();
    }
}</programlisting>
    </example>

    <para>Im <classname>WeatherServlet</classname>, instanziieren wir die
    Klasse "<classname>SimpleWeather</classname>" des
    <varname>SimpleWeather</varname> Projekts. Die Postleitzahl welche in den
    Anfrage-Parametern übermittelt wird, geht an die Methode
    <methodname>retrieveForecast()</methodname>, der zurückgegebene Text wird
    auf den <classname>Writer</classname> geleitet. Schlussendlich besteht die
    <filename>web.xml</filename>-Datei der "<varname>Simple Web</varname>"
    Anwendung, welche unter <filename>/src/main/webapp/WEB-INF</filename> zu
    finden ist, und alles zusammenbindet. Die Servlet-und
    Servlet-Mapping-Elemente definieren hierbei einen Pfad von
    <filename>/weather</filename> auf das
    <classname>WeatherServlet</classname>.</para>

    <example id="ex-simple-webapp-web.xml">
      <title>web.xml der Simple-Webapp</title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.WeatherServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/weather&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</programlisting>
    </example>
  </section>

  <section id="multimodule-sect-building-multimodule">
    <title>Erstellung des Multi-Projekt-Moduls</title>

    <para>Mit dem "<varname>Simple Weather</varname>" Projekt welches den
    allgemeinen Code zur Interaktion mit dem Yahoo! Wetterdienst erstellt,
    sowie der "<varname>Simple Web</varname>" Anwendung welche die
    Webanwendung in Form eines Servlets bereitstellt, es ist an der Zeit, zu
    Kompilieren und Packetieren, sowie Bereitstellen der Anwendung in Form
    eines WAR-Archivs. Um das zu bewerkstelligen, müssen Sie die beiden
    Projekte in der richtigen Reihenfolge kompilieren und installieren. Da
    "<varname>Simple Web</varname>" von "<varname>Simple Weather</varname>"
    abhängig ist, muss diese zuerst kompiliert werden und als JAR-Archive
    bereitgestellt werden. Tun Sie dies durch den Aufruf von <command>mvn
    clean install</command> aus dem Verzeichnis der Mutterapplikation heraus
    auf der Befehlszeile.</para>

    <screen>~/examples/ch06/simple-parent$ <command>mvn clean install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Simple Parent Project
[INFO]   simple-weather
[INFO]   simple-webapp Maven Webapp
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-weather
[INFO]    task-segment: [clean, install]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [install:install]
[INFO] Installing simple-weather-1.0.jar to simple-weather-1.0.jar
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-webapp Maven Webapp
[INFO]    task-segment: [clean, install]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [install:install]
[INFO] Installing simple-webapp.war to simple-webapp-1.0.war
[INFO] 
[INFO] ----------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ----------------------------------------------------------------------
[INFO] Simple Parent Project ............................... SUCCESS [3.041s]
[INFO] simple-weather ...................................... SUCCESS [4.802s]
[INFO] simple-webapp Maven Webapp .......................... SUCCESS [3.065s]
[INFO] ----------------------------------------------------------------------
</screen>

    <para>Wenn Maven gegen ein Projekt mit Submodulen ausgeführt wird, lädt
    Maven zunächst das höchststehende <acronym>POM</acronym>, dann lokalisiert
    es alle abhängigen POM-Dateien. Maven bringt alle Komponenten POM-Inhalte
    in das, was man den <emphasis>Maven Reaktor</emphasis> nennt, innerhalb
    werden die Komponenten POM auf deren Abhängigkeiten analysiert. Der
    Reaktor definiert die Reihenfolge der Komponenten und stellt deren
    Abarbeitung und Installation sicher.</para>

    <note>
      <para>Der Reaktor wird die Reihenfolge der Module gemäß der Definition
      in der POM erhalten, soweit dies möglich ist. Eine hilfreiches mentales
      Modell hierfür ist das Bild, dass Module mit Abhängigkeiten von
      Geschwister-Projekten solange in der Reihenfolge "nach hinten" gerückt
      werden, bis deren Abhängigkeitsverhältnisse befriedigt sind. In seltenen
      Fällen kann es nützlich sein, in die Reihenfolge der Module
      einzugreifen, - zum Beispiel, wenn Sie ein häufig instabiles Modul gegen
      Anfang des Build abarbeiten möchten.</para>
    </note>

    <para>Nachdem der Reaktor ausgearbeitet hat, in in welcher Reihenfolge die
    Projekte abgearbeitet werden müssen, führt Maven die angegebenen Goals für
    die jeweiligen Module des Multi-Moduls aus. In diesem Beispiel können Sie
    erkennen, wie Maven "<varname>Simple Weather</varname>" vor
    "<varname>Simple Web</varname>" stellt, und auf dem jeweiligem Modul einen
    Befehl <command>mvn clean install</command> abarbeitet.</para>

    <note>
      <para>Beim Ausführen von Maven von der Befehlszeile sollten Sie die
      Lebenszyklusphase <varname>clean</varname> vor allen anderen Phasen
      spezifizieren. Mit dem Aufruf von <varname>clean</varname> stellen Sie
      sicher, dass alle alten Output-Artefakte gelöscht werden, vor die
      Anwendung kompiliert und paketiert wird. <varname>clean</varname>
      auszuführen ist nicht notwendig, aber es stellt sicher dass Sie einen
      "sauberen Build" erstellen.</para>
    </note>
  </section>

  <section id="multimodule-sect-running-web">
    <title>Starten der Web-Anwendung</title>

    <para>Nach der Installation des Multi-Modul-Projekts mittels <command>mvn
    clean install</command> aus dem Stammverzeichnis von "<varname>Simple
    Project</varname>" heraus, können Sie direkt in das Unterverzeichnis
    <filename>/Simple Web wechseln</filename> und dort das Goal
    <varname>run</varname> des Jetty Plugins aufrufen:</para>

    <screen>~/examples/ch06/simple-parent/simple-webapp $ <command>mvn jetty:run</command>
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-webapp Maven Webapp
[INFO]    task-segment: [jetty:run]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [jetty:run]
[INFO] Configuring Jetty for project: simple-webapp Maven Webapp
[...]
[INFO] Webapp directory = ~/examples/ch06/simple-parent/\
                          simple-webapp/src/main/webapp
[INFO] Starting jetty 6.1.6rc1 ...
2007-11-18 1:58:26.980::INFO:  jetty-6.1.6rc1
2007-11-18 1:58:26.125::INFO:  No Transaction manager found
2007-11-18 1:58:27.633::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>Sobald Jetty mit dem Startvorgang abgeschlossen hat, laden Sie
    http://localhost:8080/simple-webapp/weather?zip=01201 in einen Browser und
    Sie sollten sehen, wie die Wettervorhersage formatiert ausgegeben
    wird.</para>
  </section>
</chapter>
