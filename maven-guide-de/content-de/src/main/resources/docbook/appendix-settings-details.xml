<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<appendix id="appendix-settings">
  <title>Appendix: Detailinformationen zur settings.xml-Datei</title>

  <section id="appendix-settings-sect-quick-overview">
    <title>Übersicht</title>

    <para>Das Element settings der <filename>setting.xml</filename> Datei
    beinhaltet die Elemente welche benutzt werden, die Laufzeitumgebung von
    Maven zu konfigurieren. Einstellungen dieser Datei sind von solcher Natur,
    dass diese über Projektgrenzen hinweg zum Einsatz kommen und daher nicht
    an ein spezifisches Projekt gebunden sein sollten oder an eine bestimmte
    Kundschaft verbreitet werden. Werte, welche darin enthalten sind, sind
    z.B. die Einstellung des lokalen Repository, alternative Remote
    Repositorien und Authentifizierungsdaten. Die
    <filename>settings.xml</filename> kann bei einer Standardinstallation an
    zweierlei Orten aufgefunden werden:</para>

    <itemizedlist>
      <listitem>
        <para>Im Maven Installationsverzeichnis:
        <filename>$M2_HOME/conf/settings.xml</filename></para>
      </listitem>

      <listitem>
        <para>Als benutzerspezifische Datei des Profils:
        <filename>~/.m2/settings.xml</filename></para>
      </listitem>
    </itemizedlist>

    <para>Hier eine Übersicht der Elemente der
    <filename>settings.xml</filename>-Datei:</para>

    <para><example>
        <title>Übersicht der Elemente einer settings.xml-Datei</title>

        <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;localRepository/&gt;
  &lt;interactiveMode/&gt;
  &lt;usePluginRegistry/&gt;
  &lt;offline/&gt;
  &lt;pluginGroups/&gt;
  &lt;servers/&gt;
  &lt;mirrors/&gt;
  &lt;proxies/&gt;
  &lt;profiles/&gt;
  &lt;activeProfiles/&gt;
&lt;/settings&gt;
</programlisting>
      </example></para>
  </section>

  <section id="appendix-settings-sect-details">
    <title>Die Details der settings.xml Datei</title>

    <section id="appendix-settings-sect-simpleval">
      <title>Einfache Wertangaben</title>

      <para>Die Hälfte der Elemente auf oberster Ebene innerhalb des Elementes
      settings sind einfache Wertangaben welche benutzt werden um das
      Verhalten von Maven zu steuern:</para>

      <para><example>
          <title>Einfache Wertangaben im top level Element der
          settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;localRepository&gt;\${user.dir}/.m2/repository&lt;/localRepository&gt;
  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;
  &lt;usePluginRegistry&gt;false&lt;/usePluginRegistry&gt;
  &lt;offline&gt;false&lt;/offline&gt;
  &lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.codehaus.mojo&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The simple top-level elements are:</para>

      <para>Diese top-level Wertangaben sind:</para>

      <variablelist>
        <varlistentry>
          <term>localRepository</term>

          <listitem>
            <para>This value is the path of this build system's local
            repository. The default value is</para>

            <para>Dieser Wert bestimmt den Pfad des lokalen Repository des
            Build Systems. Der Standardwert ist<filename>
            \${user.dir}/.m2/repository</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>InteractiveMode</term>

          <listitem>
            <para><varname>true</varname> sollte Maven auf Benutzereingaben
            warten, ansonsten <varname>false</varname>. Standardwert
            <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>usePluginRegistry</term>

          <listitem>
            <para><varname>true</varname> wenn Maven auf
            <filename>\${user.dir}/.m2/plugin-registry.xml</filename>
            zurückgreifen soll um die Plugin Versionen zu verwalten,
            Standardwert ist <varname>false</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>offline</term>

          <listitem>
            <para><varname>true</varname> sollte das Build-System im offline
            Modus arbeiten, Standardwert ist <varname>false</varname>. Dieser
            Wert ist insbesondere wichtig für serverseitige Build-Syteme,
            welche nicht auf ein externes Repository zugreifen dürfen, sei
            dies aufgrund des Netzwerkes oder auch wegen
            Sicherheitsbestimmungen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>pluginGroups</term>

          <listitem>
            <para>Dieses Element enthält eine Liste von Elementen
            <varname>pluginGroup</varname>, jedes enthält eine
            <varname>groupId</varname>. Die Liste wird durchsucht, sollte ein
            Plugin von der Kommandozeile angezogen werden und der Parameter
            der groupId nicht gesetzt sein. Standardmässig enthält diese Liste
            die <classname>org.apache.maven.plugins</classname>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="appendix-settings-sect-servers">
      <title>Servers</title>

      <para>Das Element <sgmltag>distributionManagement</sgmltag> eines
      <acronym>POM</acronym> definiert die Repositorien für die Verteilung.
      Gewisse Angaben, wie z.B. die Security Credentials sollten nicht mit der
      <filename>pom.xml</filename> Datei verteilt werden. Diese Art der
      Angaben sollte auf einem Build Server in der
      <filename>settings.xml</filename> Datei im Element
      <varname>servers</varname> abgelegt werden:</para>

      <para><example>
          <title>Server Konfiguration der settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;server001&lt;/id&gt;
      &lt;username&gt;my_login&lt;/username&gt;
      &lt;password&gt;my_password&lt;/password&gt;
      &lt;privateKey&gt;\${user.home}/.ssh/id_dsa&lt;/privateKey&gt;
      &lt;passphrase&gt;some_passphrase&lt;/passphrase&gt;
      &lt;filePermissions&gt;664&lt;/filePermissions&gt;
      &lt;directoryPermissions&gt;775&lt;/directoryPermissions&gt;
      &lt;configuration&gt;&lt;/configuration&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>Die Elemente unter <varname>server</varname> sind:</para>

      <variablelist>
        <varlistentry>
          <term>id</term>

          <listitem>
            <para>Die eindeutige Kennung - <varname>id</varname> - des Servers
            (nicht des Benutzers welcher beim Einloggen zum Einsatz kommt)
            welche mit der <varname>id</varname> des Elementes
            <varname>distributionManagement</varname> des Repositories
            übereinstimmt.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>username, password</term>

          <listitem>
            <para>Diese Elemente bilden ein Paar, sie bezeichnen das Login und
            Passwort welches notwendig ist, um sich gegenüber dem Server
            auszuweisen.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>privateKey, passphrase</term>

          <listitem>
            <para>Wie vorangehend ebenfalls zwei Elemente, dieses Paar
            beschreibt den Pfad zu einem Privaten Schlüssel (Standardwert ist
            <varname>\${user.home}/.ssh/id_dsa</varname>) und einer Passphrase,
            sollte diese notwendig sein. Hinweis: Zukünftig sollte es möglich
            sein die Elemente <varname>passphrase</varname> und
            <varname>password</varname> zu externalisieren, zur Zeit jedoch
            müssen diese in Klartext in der <filename>settings.xml</filename>
            enthalten sein.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>filePermissions, directoryPermissions</term>

          <listitem>
            <para>Sollte während des Deployments eine Repository Datei oder
            ein Verzeichnis angelegt werden, so sind dies die Rechte welche
            dort gesetzt werden. Die möglichen Werte beider Parameter sind
            eine dreistellige *nix artige Angabe entsprechend der Dateirechte,
            z.B. 664, oder 775.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="appendix-settings-sect-mirrors">
      <title>Spiegelrepositorien</title>

      <para><example>
          <title>Konfiguration eines Spiegelrepositories in der
          settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;planetmirror.com&lt;/id&gt;
      &lt;name&gt;PlanetMirror Australia&lt;/name&gt;
      &lt;url&gt;http://downloads.planetmirror.com/pub/maven2&lt;/url&gt;
      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>id, name</term>

            <listitem>
              <para>Die eindeutige Kennung, <varname>id</varname>, des
              Spiegelrepositories. Diese <varname>id</varname> wird benutzt,
              um zwischen verschiedenen Elementen <varname>mirror</varname> zu
              unterscheiden.</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <varlistentry>
            <term>url</term>

            <listitem>
              <para>Die <acronym>Basis URL</acronym> des Spiegelrepositories.
              Das Build System wird diese <acronym>URL</acronym> einem
              Repository Aufruf voransetzen, satt diese an die URL des
              Standard Server Repostory zu senden.</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <varlistentry>
            <term>mirrorOf</term>

            <listitem>
              <para>Die <varname>id</varname> des Servers, welcher von diesem
              Server gespiegelt wird. Ein Beispiel, um auf eine
              Spiegelrepository des Maven central Server zu verweisen (<ulink
              url="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</ulink>),
              setzen Sie diesen Wert auf <varname>central</varname>. Der Wert
              muss nicht mit der <varname>id</varname> des Spiegelrepositories
              übereinstimmen.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="appendix-settings-sect-proxies">
      <title>Proxies</title>

      <para><example>
          <title>Konfiguration eines Proxy in der settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;proxies&gt;
    &lt;proxy&gt;
      &lt;id&gt;myproxy&lt;/id&gt;
      &lt;active&gt;true&lt;/active&gt;
      &lt;protocol&gt;http&lt;/protocol&gt;
      &lt;host&gt;proxy.somewhere.com&lt;/host&gt;
      &lt;port&gt;8080&lt;/port&gt;
      &lt;username&gt;proxyuser&lt;/username&gt;
      &lt;password&gt;somepassword&lt;/password&gt;
      &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;/nonProxyHosts&gt;
    &lt;/proxy&gt;
  &lt;/proxies&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>id</term>

            <listitem>
              <para>Die eindeutige Kennung, <varname>id</varname>, des Proxy.
              Diese <varname>id</varname> wird benutzt, um zwischen
              verschiedenen Elementen <varname>proxy</varname> zu
              unterscheiden</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>active</term>

            <listitem>
              <para><varname>true</varname>, wenn dieser Proxy aktiviert ist.
              Insbesondere nützlich wenn mehrere Proxy konfiguriert sind, aber
              nur einer tatsächlich zum Einsatz kommen darf.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>protocol, host, port</term>

            <listitem>
              <para>The <varname>protocol://host:port</varname> of the proxy,
              separated into discrete elements.</para>

              <para>Die Bestandteile der URL des Proxy:
              <varname>protocol://host:port;</varname>die Elemente werden
              getrennt geführt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>username, password</term>

            <listitem>
              <para>Diese Elemente bilden ein Paar, sie bezeichnen das Login
              und Passwort welches notwendig ist, um sich gegenüber dem Proxy
              auszuweisen.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>nonProxyHosts</term>

            <listitem>
              <para>Unter diesem Element befindet sich eine Liste der
              Ressourcen welche nicht durch den Proxy abgebildet werden
              sollten. Das Trennsymbol der Liste ist das vom Proxy Server
              erwartete Zeichen; in unserem Beispiel das ‚Pipe’-Symbol.
              Ebenfalls häufig angewandt ist die Komma getrennte Liste.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="appendix-settings-sect-profiles">
      <title>Profiles</title>

      <para>Das Element <varname>profile</varname> der
      <filename>settings.xml</filename>-Datei ist ein verkürzter Auszug des
      Elements <varname>profile</varname> der
      <filename>pom.xml</filename>-Datei. Es besteht aus den Elementen
      <varname>activation</varname>, <varname>repositories</varname>,
      <varname>pluginRepositories</varname> und <varname>properties</varname>.
      Das Element beinhaltet nur diese vier Elemente, da diese das Build
      System als ganzes betreffen (welches der Rolle der
      <varname>settings.xml</varname> entspricht) und nicht einzelne Aspekte
      der Projekt Modell Einstellungen.</para>

      <para>Wird ein Profil innerhalb einer <varname>settings.xml</varname>
      aktiviert, so übersteuert dies jedes entsprechende Profil einer
      <filename>pom.xml</filename> oder <varname>profiles.xml</varname>
      Datei.</para>
    </section>

    <section id="appendix-settings-sect-activation">
      <title>Activation</title>

      <para>Aktivierungen sind Schlüsselemente eines Profiles. Wie Profile
      eines <acronym>POM</acronym> rührt die Mächtigkeit der Profile der
      <filename>settings.xml </filename>von der Möglichkeit her, Werte nur
      unter bestimmten Umständen/Bedingungen zu beeinflussen. Diese
      Bedingungen werden im Element <varname>activation</varname>
      bestimmt.</para>

      <para><example>
          <title>Definition eines Activation Parameters in der
          settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;test&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;
        &lt;jdk&gt;1.5&lt;/jdk&gt;
        &lt;os&gt;
          &lt;name&gt;Windows XP&lt;/name&gt;
          &lt;family&gt;Windows&lt;/family&gt;
          &lt;arch&gt;x86&lt;/arch&gt;
          &lt;version&gt;5.1.2600&lt;/version&gt;
        &lt;/os&gt;
        &lt;property&gt;
          &lt;name&gt;mavenVersion&lt;/name&gt;
          &lt;value&gt;2.0.3&lt;/value&gt;
        &lt;/property&gt;
        &lt;file&gt;
          &lt;exists&gt;\${basedir}/file2.properties&lt;/exists&gt;
          &lt;missing&gt;\${basedir}/file1.properties&lt;/missing&gt;
        &lt;/file&gt;
      &lt;/activation&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>Die Aktivierung tritt ein, wenn alle definierten Kriterien erfüllt
      sind, jedoch nicht notwendigerweise alle zur gleichen Zeit.</para>

      <variablelist>
        <varlistentry>
          <term>jdk</term>

          <listitem>
            <para><varname>activation</varname> beinhaltet eine eingebaute
            Java spezifische Prüfung des Elements <varname>jdk</varname>.
            Dieses Element wird aktiviert, sobald ein Test unter einer
            bestimmten Version eines JDK (angegeben durch ein entsprechendes
            Kürzel) läuft. Im oben angegebenen Beispiel wäre dies für 1.5.0_06
            der Fall.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>os</term>

          <listitem>
            <para>Mittels des Elements <varname>os</varname> können, wie oben
            ausgeführt, Betriebssystem spezifische Eigenschaften geprüft
            werden.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>property</term>

          <listitem>
            <para>Das Profil wird aktiviert, sollte Maven ein Property (ein
            Wert, welcher innerhalb des POM mittels <varname>\${name}</varname>
            referenziert werden kann) mit dem entsprechenden Wertepaar finden.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>file</term>

          <listitem>
            <para>Schliesslich kann ein Profil durch die Existenz oder das
            Fehlen einer bestimmten Datei aktiviert werden.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Das Element <varname>activation</varname> ist nicht der einzige
      Weg, wie ein Profil aktiviert werden kann. Die Profil
      <varname>id</varname> kann ebenfalls innerhalb der Datei
      <filename>settings.xml</filename> im Element
      <varname>activeProfile</varname> bestimmt werden. Profile können auch
      explizit von der Befehlszeile mittels einer Komma getrennten Liste einem
      P-flag folgend, aufgerufen werden (z.B. –p test).</para>

      <para>Um festzustellen, welche Profile von einem bestimmten Build
      aktiviert werden, benutzen Sie das Maven Help Plugin.</para>

      <screen>mvn help:active-profiles
</screen>
    </section>

    <section id="appendix-settings-sect-properties">
      <title>Properties</title>

      <para>Maven Properties sind ein Platzhalter für Werte - wie auch
      Properties unter Ant. Auf deren Werte ist mittels der Notation
      <varname>\${x}</varname>, x ist der Name des Properties, von überall
      innerhalb eines <acronym>POM</acronym> zuzugreifen. Properties kommen in
      fünf verschiedenen Varianten, alle zugreifbar von innerhalb der
      <filename>settings.xml</filename>:</para>

      <variablelist>
        <varlistentry>
          <term><literal>env.</literal><replaceable>X</replaceable></term>

          <listitem>
            <para>Kennzeichnet man eine Variable mit vorangestelltem
            ‘<literal>env.</literal>’ so wird der Wert der entsprechende Shell
            Variablen zurückgegeben. Ein Beispiel:
            <varname>\${env.PATH}</varname> enthält den Wert der
            Umgebungsvariablen <varname>$PATH</varname>
            (<varname>%PATH%</varname> unter Windows).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>project.</literal><replaceable>x</replaceable></term>

          <listitem>
            <para>Ein punktnotierter (.) Pfad innerhalb der
            <filename>pom.xml</filename> Datei wird den entsprechenden Wert
            enthalten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>settings.</literal><replaceable>x</replaceable></term>

          <listitem>
            <para>Ein punktnotierter (.) Pfad innerhalb der
            <filename>settings.xml</filename> Datei wird den entsprechenden
            Wert enthalten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Java system properties</term>

          <listitem>
            <para>Alle Properties welche durch
            <classname>java.lang.System.getProperties()</classname>
            offengelegt werden sind ebenfalls als POM Properties zugänglich,
            so zum Beispiel das Property
            <varname>\${java.home}</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><replaceable>x</replaceable></term>

          <listitem>
            <para>Innerhalb eines Elements <varname>properties</varname> oder
            innerhalb einer externen Datei gesetzt, ist der Wert durch
            <varname>\${einWert}</varname> zugänglich.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><example>
          <title>Setzen des Properties \${user.install} property in der
          settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;properties&gt;
        &lt;user.install&gt;\${user.dir}/our-project&lt;/user.install&gt;
      &lt;/properties&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>Das Property <varname>\${user.install}</varname> ist für dieses POM
      zugänglich, wenn das Profil aktiv ist.</para>
    </section>

    <section id="appendix-settings-sect-settings-repository">
      <title>Repositories</title>

      <para>Repositorien sind entfernte Objektsammlungen, von welchen Maven
      das lokale Repository bestückt. Von diesem lokalen Repository ruft Maven
      die entsprechenden Abhängigkeiten oder Plugins ab. Verschiedene ferne
      Repositorien können verschiedene Projekte enthalten, und mittels aktiver
      Profile können diese nach entsprechenden Releases und Snapshot
      Artefakten durchsucht werden.</para>

      <para><example>
          <title>Repository Konfiguration in der settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;codehausSnapshots&lt;/id&gt;
          &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        ...
      &lt;/pluginRepositories&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>releases, snapshots</term>

            <listitem>
              <para>Zu jedem Artefakttyp <varname>release</varname> und
              <varname>snapshot</varname> bestehen Regeln. Mit diesen zwei
              Gruppen hat ein <acronym>POM</acronym> die Möglichkeit die
              Regeln innerhalb eines Repositories typspezifisch und unabhängig
              von den anderen Typen anzupassen. Zum Beispiel kann man eine
              Einschränkung erstellen welche es nur erlaubt in der Entwicklung
              <varname>snapshot</varname> Artefakte herunterzuladen.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>enabled</term>

            <listitem>
              <para><varname>true</varname> oder <varname>false</varname>
              entsprechend ob ein Repository für den entsprechenden Typ
              zugelassen ist oder nicht (<varname>release</varname> oder
              <varname>snapshot</varname>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>updatePolicy</term>

            <listitem>
              <para>Dieses Element bestimmt wie oft ein Update Versuch
              stattfinden soll. Maven wird den Timestamp des lokalen
              <acronym>POM</acronym> mit dem des fernen Artefakten
              vergleichen. Die möglichen Werte sind:
              <varname>always</varname>, <varname>daily</varname>
              (Standardeinstellung), <varname>interval:X</varname> (wobei
              <varname>X</varname> eine ganze Zahl in Minuten ist) oder
              <varname>never</varname></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>checksumPolicy</term>

            <listitem>
              <para>Wann immer Maven eine Datei in ein Repository einstellt,
              wird ebenfalls eine Quersummendatei eingesetellt. Sie haben hier
              die Wahlmöglichkeit bezüglich <varname>ignore</varname>,
              <varname>fail</varname>, oder <varname>warn</varname> sollte
              eine Quersummendatei fehlen oder fehlerhaft sein.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>layout</term>

            <listitem>
              <para>In der vorangegangenen Beschreibung der Repositorien wurde
              erwähnt, dass alle Repositorien einem gemeinsamen Layout
              entsprechen. Das stimmt <emphasis>meistens</emphasis>. Maven 2
              besitzt ein bestimmtes Standardlayout; jedoch baut Maven 1 auf
              ein anderes Format auf. Benutzen Sie diesen Parameter, um zu
              bestimmen, ob es <varname>default</varname> oder
              <varname>legacy</varname> ist. Sollten Sie von Maven 1 auf Maven
              2 migrieren, und Sie möchten das bisherige Repository , welches
              unter Maven 1 benutzt wurde weiterverwenden, so setzen Sie
              <varname>layout</varname> auf <varname>legacy</varname>.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="appendix-settings-sect-plugin-repositories">
      <title>Plugin Repositories</title>

      <para>Die Struktur des Elementblocks
      <varname>pluginRepositories</varname> ist ähnlich dem des Elementblocks
      <varname>repositories</varname>. Das Element
      <varname>pluginRepository</varname> spezifiziert jeweils eine entfernte
      Lokation, in welcher Maven Plugin Artefakte finden kann.</para>

      <example>
        <title>Plugin Repositories in der settings.xml</title>

        <programlisting>&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;repositories&gt;
        ...
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;codehausSnapshots&lt;/id&gt;
          &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
      </example>
    </section>

    <section id="appendix-settings-sect-active-profiles">
      <title>Aktive Profile</title>

      <para><example>
          <title>Setzen von aktiven Profiles in der settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;env-test&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>Der letzte Baustein des <filename>settings.xml</filename> Puzzles
      ist das Element <varname>activeProfiles</varname>. Dieses bestimmt die
      Menge der Elemente <varname>activeProfile</varname>, welche alle einen
      eigenen Wert <varname>id</varname> haben. Jede Profile-id, welche als
      <varname>activeProfile</varname> definiert wurde wird immer aktiv sein,
      ungeachtet jeglicher Umgebungseinflüsse. Sollte kein entsprechendes
      Profil gefunden werden, so wird nichts passieren. So wird zum Beispiel,
      sollte <varname>env-test</varname> ein aktives Profil in
      <varname>activeProfile</varname> sein, ein Profil einer
      <filename>pom.xml</filename> (oder auch
      <filename>profile.xml</filename>) mit einer entsprechenden <varname>id
      </varname>aktiviert. Sollte kein solches Profil gefunden werden, so wird
      die Verarbeitung unberührt fortfahren.</para>
    </section>
  </section>
</appendix>
