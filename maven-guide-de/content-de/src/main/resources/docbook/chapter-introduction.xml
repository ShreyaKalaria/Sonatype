<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="introduction">
  <title>Einführung von Apache Maven</title>

  <para>Es gibt zwar schon eine Reihe Online Veröffentlichungen zum Thema
  Apache Maven, aber was bis heute fehlt, ist eine umfassende, gut
  geschriebenen Einführung von Maven, welche zugleich als altgediente Referenz
  herhalten kann. Was wir hier versucht haben, ist eine solche gesamthafte
  Einführung gepaart mit einer umfassenden Referenz zu erstellen.</para>

  <section id="introduction-sect-whatIsMaven">
    <title>Maven ... Was ist das?</title>

    <para>Die Antwort auf diese Frage hängt ganz von Ihrer Perspektive ab. Die
    große Mehrheit der Benutzer wird Maven als
    "<emphasis>Build</emphasis>"-Werkzeug einordnen: ein Werkzeug um aus
    Quellcode einsatzfähige Artefakte (Programme) zu erzeugen. Build
    Ingenieure und Projektmanager mögen Maven als etwas umfassenderes sehen:
    ein (technisches) Projektmanagement-Tool. Wo liegt der Unterschied? Ein
    Build-Werkzeug wie Ant ist ausschließlich auf die Vorverarbeitung,
    Kompilierung, Prüfung und Verteilung ausgelegt. Ein
    Projekt-Management-Tool wie Maven liefert eine Obermenge von Funktionen
    welche in einem Build- und Paketier-Werkzeug zur Anwendung kommen. Neben
    der Bereitstellung von Build Funktionalitäten, bietet Maven auch die
    Möglichkeit Berichte/Auswertungen (Reports) anzufertigen, Websites zu
    generieren und den Kontakt zwischen den Mitgliedern einer
    Arbeitsgruppe/eines Teams zu ermöglichen.</para>

    <para>Hier eine formale Definition von Apache Maven: Maven ist ein
    Projektmanagement-Tool welches ein umfassendes Projektmodell beinhaltet
    und eine Reihe von Normen bereitstellt. Darüber hinaus verfügt es über
    einen definierten Projekt-Lebenszyklus, ein
    Abhängigkeits-Management-System sowie Logik, welche die Ausführung von
    Plugin-Goals in definierten Phasen eines Lebenszykluses ermöglicht. Wenn
    Sie Maven einsetzen, beschreiben Sie Ihr Projekt in einem genau
    definierten Projekt Objekt Modell, im weiteren Text POM genannt. Maven
    kann dann auf dieses Modell überspannende Regelwerke aus der Menge
    gemeinsam genutzter (oder auch massgeschneiderter) Plugins
    anwenden.</para>

    <para>Lassen Sie sich nicht von der Tatsache dass Maven ein
    "Projektmanagement" Werkzeug darstellt, erschrecken. Sollten Sie lediglich
    nach einem Build-Tool Ausschau gehalten haben, so wird Maven Ihnen dies
    ebenfalls bieten. In der Tat, die ersten Kapitel dieses Buches befassen
    sich mit dem häufigsten Anwendungsfall: Der Verwendung von Maven um Ihr
    Projekt zu kompilieren, testen und zu verteilen.</para>
  </section>

  <section id="installation-sect-conventionConfiguration">
    <title>Konvention über Konfiguration</title>

    <para>Konvention über Konfiguration ist ein einfaches Konzept: Systeme,
    Bibliotheken und Frameworks sollten von vernünftige Standardwerten
    ausgehen, ohne unnötige Konfigurationen zu benötigen - Systeme sollten
    "einfach funktionieren". Gängige Frameworks wie Ruby on Rails und EJB3
    haben damit begonnen, sich an diesen Grundsätzen zu orientieren. Dies in
    Reaktion auf die Komplexität der Konfiguration von Frameworks wie etwa der
    anfänglichen EJB 2.1 Spezifikationen. Das Konzept '<emphasis>Konvention
    über Konfiguration</emphasis>' wird am Beispiel der EJB 3 Persistenz schön
    veranschaulicht: alles, was Sie tun müssen, um ein bestimmtes Bean
    persistent zu speichern ist, dieses mit einer
    <classname>@Entitiy</classname>-Annotation zu versehen. Das Framework
    übernimmt Tabellen-und Spaltennamen basierend auf den Namen der Klasse und
    den Namen der Attribute. Es besteht die Möglichkeit, mittels sogenannter
    'Hooks' - wenn nötig - die gesetzten Standardwerte zu übersteuern. In den
    meisten Fällen werden Sie feststellen, dass der Einsatz der vom Framework
    bereitgestellten Namen zu einer schnelleren Projektdurchführung
    führt.</para>

    <para>Maven greift dieses Konzept auf und stellt vernünftige
    Standard-Verhalten für Projekte bereit. Ohne weitere Anpassungen, wird
    davon ausgegangen, dass sich Quellcode im Verzeichnis
    <filename>\${basedir}/src/main/java</filename> und Ressourcen sich im
    Verzeichnis <filename>\${basedir}/src/main/resources</filename> befinden.
    Von Tests wird davon ausgegangen, dass diese sich im Verzeichnis
    \${basedir}/src/test befinden, sowie ein Projekt standardmäßig ein
    JAR-Archive bereitstellt. Maven geht davon aus, dass Sie den kompilierten
    Byte-Code unter <filename>\${basedir}/target/classes</filename> ablegen
    wollen und anschließend ein ausführbares JAR-Archive erstellen, welches im
    Verzeichnis \${basedir}/target abgelegt wird. Zwar mag diese Lösung trivial
    anmuten, jedoch bedenken Sie bitte die Tatsache, dass die meisten
    Ant-basierten Projekte die Lage dieser Verzeichnisse in jedem Teilprojekt
    festlegen müssen. Die Umsetzung von Konvention über Konfiguration in Maven
    geht noch viel weiter als nur einfache Verzeichnis Standorte festzulegen,
    Maven-Core-Plugins kennen ein einheitliches System von Konventionen für
    die Kompilierung von Quellcode, der Paketierung sowie Verteilung der
    Artefakten, der Generierung von (Dokumentations-) Web-Seiten, und vielen
    anderen Prozessen. Die Stärke von Maven beruht auf der Tatsache, dass
    Maven mit einer 'vorbestimmten Meinung' ausgelegt ist: Maven hat einen
    definierten Lebenszyklus sowie eine Reihe von Plugins welche unter
    gemeinsamen Annahmen in der Lage sind, Software zu erstellen. Sollten Sie
    nach den Konventionen arbeiten, erfordert Maven fast keinen Aufwand -
    einfach Ihre Quellen in das richtige Verzeichnis legen - Maven kümmert
    sich um den Rest.</para>

    <para>Ein Nachteil der Verwendung von Systemen welche dem Grundsatz der
    Konvention über Konfiguration folgen ist, dass Endbenutzer oftmals die
    Gefahr sehen, dass sie gezwungen werden eine bestimmte Methode anzuwenden
    - einem bestimmten Ansatz folgen müssen. Zwar ist es sicherlich richtig,
    dass der Kern von Maven auf einigen wenigen Grundannahmen basiert, welche
    nicht in Frage gestellt werden sollten, dennoch kann man die meisten
    Vorgaben auf die jeweilig vorherrschenden Bedürfnisse anpassen und
    konfigurieren. So kann zum Beispiel die Lage des Projekt-Quellcodes sowie
    dessen Ressourcen konfiguriert werden, oder die Namen der resultierenden
    JAR-Archive angepasst werden. Durch die Entwicklung von massgefertigten
    Plugins, kann fast jedes Verhalten an die Bedürfnisse Ihrer Umgebung
    angepasst werden. Sollten Sie der Konvention nicht folgen wollen,
    ermöglicht Maven es Ihnen Voreinstellungen anzupassen um Ihren
    spezifischen Anforderungen Rechnung zu tragen.</para>
  </section>

  <section id="installation-sect-common-interface">
    <title>Die gemeinsame Schnittstelle</title>

    <para>In der Zeit vor Maven, das eine gemeinsame Schnittstelle für den
    Build von Software bereitstellte, hatte gewöhnlich jedes einzelne Projekt
    eine Person, welche sich der Verwaltung des völlig eigenen Build Systems
    widmete. Entwickler mussten einige Zeit aufwenden, um neben der
    tatsächlichen Entwicklung herauszufinden, welche Eigenheiten beim Build
    einer neuen Software zu berücksichtigen waren, zu welcher sie beitragen
    wollten. Im Jahr 2001, gab es völlig unterschiedliche Build
    Konzepte/Systeme welche für den Build eines Projekts wie Turbine, POI oder
    Tomcat zur Anwendung kamen. Jedesmal, wenn ein neues Source
    Code-Analyse-Tool zur statischen Analyse von Quellcode veröffentlicht
    wurde, oder wenn jemand ein neues Unit-Test Framework herausgab welches
    man einsetzen wollte/sollte, musste man alles stehen und liegen lassen, um
    herauszufinden, wie dieses neue Werkzeug in das Projekt und dessen Build
    Umgebung einzupassen wäre. Wie konnte man Unit-Tests laufen lassen? Es gab
    tausend verschiedene Antworten. Dieses Umfeld war geprägt von tausenden
    endlosen Auseinandersetzungen bezüglich der 'richtigen' Werkzeuge und
    Build-Vorgehen. Das Zeitalter vor Maven war ein Zeitalter der Ineffizienz:
    das Zeitalter der "Build-Ingenieure".</para>

    <para>Heute setzen die meisten Open-Source-Entwickler bereits auf Maven,
    oder nutzen dieses um neue Software-Projekten aufzusetzen. Dieser Übergang
    ist weniger ein Wechsel von einem Build Werkzeug zu einem anderen, sondern
    viel mehr eine Entwicklung, hin zum Einsatz einer gemeinsamen
    Build-Schnittstelle für Projekte. So wie Software-Systeme modularer
    wurden, wurden Build Werkzeuge komplexer und die Zahl der (Teil-)Projekte
    wuchs in den Himmel. In der Zeit vor Maven, mussten Sie, wollten Sie etwa
    ein Projekt wie Apache ActiveMQ oder Apache ServiceMix aus Subversion
    auschecken und aus den Quellen erstellen, mit mindestens einer Stunde
    Aufwand rechnen, die Sie damit verbrachten herauszufinden, wie das
    Build-System des einzelnen Projekts funktionierte. Was waren die
    Voraussetzungen, um das Projekt zu builden? Welche Bibliotheken muss man
    herunterladen? Wo bekomme ich diese? Welche Targets kann ich im Build
    ausführen? Im besten Fall dauerte es ein paar Minuten um herauszufinden
    wie ein neues Projekt zu builden war, - und im schlimmsten Fall (wie die
    alte Servlet-API-Umsetzung des Jakarta-Projekts), war ein Projekt aufbauen
    so schwierig, das es mehrere Stunden dauerte nur um an einen Punkt zu
    gelangen, an dem ein neuer Mitarbeiter den Quellcode bearbeiten konnte und
    das Projekt kompilierte. Heutzutage machen Sie einen Projekt Check-Out und
    führen <command>mvn install</command> aus.</para>

    <para>Während Maven eine Reihe von Vorteilen einschließlich der Verwaltung
    von Abhängigkeiten und Wiederverwendung von gemeinsamer Logik zum Build
    durch Plugins bietet, ist der Hauptgrund für den Erfolg der, dass es
    gelungen ist eine einheitliche Schnittstelle für den Build von Software
    bereitzustellen. Wenn Sie sehen, dass ein Projekt wie Apache Wicket Maven
    verwendet, können Sie davon ausgehen, dass Sie in der Lage sein werden,
    Projekt ohne weiten Aufwand auszuchecken und aus den Quellen mittels
    <command>mvn</command> zu bauen und zu installieren. Sie wissen, wo der
    Zündschlüssel hinkommt, Sie wissen, dass das Gas-Pedal auf der rechten
    Seite und die Bremse auf der Linken ist.</para>
  </section>

  <section id="installation-sect-universal-reuse">
    <title>Universelle Wiederverwendung durch Maven-Plugins</title>

    <para>Der Herzstück von Maven ist ziemlich dumm. Es weiss nicht viel mehr
    als ein paar XML-Dokumenten zu parsen sowie einen Lebenszyklus und ein
    paar Plugins zu verwalten. Maven wurde so konzipiert, dass die meiste
    Verantwortung auf eine Anzahl Maven-Plugins delegiert werden kann, welche
    den Lebenszyklus von Maven beeinflussen sowie gewisse Goals erreichen
    können. Der Großteil der Arbeit geschieht in Maven Goals. Hier passieren
    Dinge wie die Kompilierung von Quellcode, der Paketierung von Bytecode,
    die Erstellung von Websites, und jede andere Aufgabe die um einen Build zu
    erfüllen notwenig ist. Die Maven Installation nach dem Download von Apache
    weiß noch nicht viel über die Paketierung eines WAR-Archivs oder dem
    Ausführen eines JUnit-Tests; der größte Teil der Intelligenz von Maven ist
    in den Plugins enthalten und diese bezieht Maven aus dem Maven-Repository.
    In der Tat, das erste Mal, als Sie einen Aufruf wie z.B. <command>mvn
    install</command> auf Ihrer neuen Maven Installation absetzten, holte sich
    Maven die meisten der Core Maven Plugins aus dem zentralen
    Maven-Repository. Das ist mehr als nur ein Trick, um die Download-Größe
    von Maven in der Verteilung zu beeinflussen, dieses Verhalten ist es, das
    es erlaubt, durch die Erweiterung eines Plugins die Fähigkeiten des Builds
    zu verändern. Die Tatsache, dass Maven sowohl die Abhängigkeiten wie auch
    die Plugins aus einem Remote-Repository lädt ermöglicht universelle
    Wiederverwendung von Build-Logik.</para>

    <para>Das <glossterm>Maven Surefire Plugin</glossterm> ist das Plugin,
    welches für die Ausführung von Unit-Tests verantwortlich zeichnet.
    Irgendwo zwischen Version 1.0 und der aktuell verbreiteten Version hat
    jemand beschlossen, dieses neben der Unterstützung von JUnit auch um die
    Unterstützung für das TestNG Unit-Test Framework zu erweitern. Dies
    geschah in einer Art und Weise, dass die Abwärtskompatibilität erhalten
    blieb. Für die Benutzer des Surefire Plugin im Einsatz von JUnit3 Tests
    veränderte sich nichts, weiterhin werden die Tests kompiliert und
    ausgeführt, wie dies zuvor der Fall war. Aber Sie erhalten eine neue
    Funktionalität, denn sollten Sie nun Unit Tests nach dem TestNG Framework
    ausführen wollen, so haben Sie nun auch diese Möglichkeit, dank der
    Bemühungen der Maintainer des Surefire Plugin. Das Plugin erhielt auch die
    Fähigkeit annotierte JUnit4 Unit Tests zu unterstützen. Alle diese
    Erweiterungen wurden bereitgestellt, ohne dass Sie Maven aktiv
    aktualisieren, oder neue Software installieren mussten. Und ganz zentral,
    Sie mussten nichts an Ihrem Projekt ändern, abgesehen von einer
    Versionsnummer für ein Plugin in einem POM.</para>

    <para>Es ist dieser Mechanismus welche sich auf wesentlich mehr als nur
    das Surefire Plugin auswirkt: Projekte werden mittels einem Compiler
    Plugin kompiliert, mittels JAR-Plugin in JAR-Archive gepackt, es gibt es
    Plugins zum Erstellen von Berichten, Plugins zur Ausführung von JRuby und
    Groovy-Code, sowie Plugins zum Veröffentlichen von Websites auf
    Remote-Servern. Maven hat gemeinsame Aufgaben in Plug-Ins herausgelöst
    welche zentral gewartet sowie universell eingesetzt werden. Wann immer
    Veränderungen in einem Bereich des Buildens umgesetzt werden, wann immer
    ein neues Unit-Test Framework freigegeben oder ein neues Werkzeug bereit
    gestellt wird. Sie sind nicht gezwungen, diese Änderungen in ihren Build
    einzupflegen um dies zu unterstützen. Sie profitieren von der Tatsache,
    dass Plugins von einem zentral gewarteten Remote-Repository
    heruntergeladen werden. Das ist die wahre Bedeutung von universeller
    Wiederverwendung durch Maven Plugins.</para>
  </section>

  <section id="installation-sect-conceptual">
    <title>Konzeptionelles Modell eines "Projekts"</title>

    <para>Maven unterhält ein (abstraktes) Modell eines Projekts, Sie
    verarbeiten also nicht nur Quellcode Dateien in Binärdateien, Sie
    entwickeln zugleich eine Beschreibung des Software-Projekts und ordnen
    diesem eine Reihe einzigartiger Koordinaten zu. Sie beschreiben die
    Attribute des Projekts: Wie ist die Projektlizenzierung geregelt? Wer
    entwickelt und trägt zum Projekt bei? Zu welchen anderen Projekten
    bestehen Abhängigkeiten? Maven ist mehr als nur ein "Build-Tool", es ist
    mehr als nur eine Verbesserung von Werkzeugen wie
    <productname>make</productname> und <productname>Ant</productname>; es ist
    eine Plattform, umfasst eine neue Semantik bezüglich Software-Projekten
    und Software-Entwicklung. Diese Definition eines Modells für jedes Projekt
    ermöglicht Funktionen wie:</para>

    <variablelist>
      <varlistentry>
        <term><firstterm>Dependency Management / Abhängigkeits
        Verwaltung</firstterm></term>

        <listitem>
          <para>Da ein Projekt einzigartig mittels einer Gruppenkennung
          (<firstterm>groupId</firstterm>), Artefaktenkennung
          (<firstterm>artifactId</firstterm>) und Version
          (<firstterm>version</firstterm>) identifiziert wird, ist nun
          möglich, diese Koordinaten zur Abhängigkeitsverwaltung
          einzusetzen.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><firstterm>Remote-Repositories</firstterm></term>

        <listitem>
          <para>Mit Blick auf das Abhängigkeitsmanagement ist es nun möglich
          diese im Maven Projekt Objekt Modell eingeführten Koordinaten
          einzusetzen um Maven Repositorien aufzubauen.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Universelle Wiederverwendung der Build-Logik</term>

        <listitem>
          <para>Plugins werden ausgerichtet auf das Projekt Objekt Model (POM)
          gebaut, sie sind nicht dafür ausgelegt auf bestimmte Dateien an
          bestimmten Orten zuzugreifen. Alles wird in das Modell abstrahiert,
          Plugin-Konfiguration und Anpassung geschieht im Modell.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Tool Portabilität / Integration</term>

        <listitem>
          <para>Werkzeuge wie Eclipse, NetBeans oder IntelliJ haben jetzt
          einen gemeinsamen Ort um auf Projektinformationen zuzugreifen. Vor
          dem Aufkommen von Maven, gab es für jede IDE eine spezifische Art
          und Weise in welcher diese Daten abgelegt wurden, was im
          Wesentlichen einem benutzerdefinierten POM entspricht. Maven
          standardisiert diese Beschreibung und während jeder IDE weiterhin
          deren eigenes Datenablagesystem unterhalten kann, lässt sich dieses
          nun leicht aus dem Modell heraus generieren.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Einfache Suche und Filterung von Projekt-Artefakten</term>

        <listitem>
          <para>Werkzeuge wie Nexus ermöglichen es Ihnen schnell und einfach
          Archive auf der Basis der im POM enthaltenen Daten zu indexieren und
          zu durchsuchen.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Maven hat eine Grundlage für die Anfänge einer konsistenten
    semantischen Beschreibung eines Software-Projekts geschaffen.</para>
  </section>

  <section id="installation-sect-mavenAlternativeAnt">
    <title>Ist Maven eine Alternative zu XYZ?</title>

    <para>Natürlich, Maven stellt eine Alternative zu Ant dar, aber Apache Ant
    ist nach wie vor ein großartiges, weit verbreitetes Werkzeug. Es stellt
    seit Jahren den amtierende Champion der Java Build Tools, und Sie können
    auch weiterhin Ant-Build-Skripte einfach in Ihr Maven Projekt integrieren.
    Das ist auch eine gebräuchliche Art, Maven einzusetzen. Andererseits,
    jetzt da mehr und mehr Open-Source-Projekte sich auf Maven zubewegen und
    Maven als Projekt Management Plattform einsetzen, haben aktive Entwickler
    begonnen zu erkennen, dass Maven nicht nur die Aufgabe der Build
    Verwaltung unterstützt, sondern insgesamt zur Förderung einer gemeinsamen
    Schnittstelle zwischen Entwicklern und Software Projekte beiträgt. Maven
    hat viele Ausprägungen eine Plattform als nur eines Werkzeugs. Wenn Sie
    die Auffassung vertreten würden, Maven als eine Alternative zu Ant
    anzusehen, so würden Sie Äpfel mit Birnen vergleichen. Maven umfasst mehr
    als nur ein einen Werkzeugkasten um Projekte zu Builden.</para>

    <para>Dies ist das zentrale Argument, welches alle Vergleiche der Art
    Maven/Ant, Maven/Buildr, Maven/Gradle unerheblich macht. Maven ist nicht
    bestimmt von der Mechanik Ihres Build-Systems, es fusst nicht auf dem
    Skripting der verschiedenen Aufgaben Ihres Builds, sondern es geht weit
    mehr um die Förderung einer Reihe von Standards, einer gemeinsamen
    Schnittstelle, eines Leben-Zykluses, einem Standard-Repository Format,
    einem Standard-Verzeichnis Layout, usw. Es geht sicherlich nicht darum,
    welches POM-Format zum Einsatz kommt, ob XML, YAML, Ruby oder Maven. Maven
    bietet weit mehr als dies: Maven und bezieht sich auf viel mehr als nur
    das Werkzeug. Wenn dieses Buch von Maven spricht, so bezieht sich dies auf
    die Zusammenstellung von Software, Systemen und Standards, welche Maven
    unterstützt. Buildr, Ivy, Gradle alle diese Werkzeuge interagieren mit den
    Repository-Format welches zu definieren Maven beigetragen hat. Sie könnten
    genauso einen Build auf der Basis von Buildr einzig unter Zuhilfenahme von
    einem Tool wie Nexus aufbauen, Nexus wird in vorgestellt in <link
    linkend="???">Kapitel 16: Repository-Manager</link>.</para>

    <para>Während Maven eine Alternative für viele dieser Tools darstellt,
    muss die Gemeinschaft der Open Source Entwickler darüber hinaus kommen
    können, Technologie als ein kontinuierliches Nullsummenspiel zwischen
    unfreundlichen Konkurrenten in einer kapitalistischen Wirtschaft zu sehen.
    Dies mag im Wettbewerb von Großunternehmen und Ihrem Bezug zu einander
    sinnvoll erscheinen, hat aber wenig Relevanz auf die Art und Weise, wie
    Open-Source-Communities arbeiten. Die Überschrift "Wer gewinnt? Ant oder
    Maven?" ist nicht sehr konstruktiv. Zwingen Sie uns, diese Frage zu
    beantworten, werden wir uns definitiv auf die Seite von Maven schlagen und
    darlegen, dass Maven eine gegenüber Ant überlegene Alternative darstellt
    die darüberhinaus die Grundlage für eine Technologie des Buildes legt.
    Gleichzeitig bitten wir zu berücksichtigen, dass die Grenzen von Maven in
    ständiger Bewegung sind, die Maven Gemeinde ist immerzu versucht, neue
    Wege zu mehr Ökumene, mehr Interoperabilität, größerer Gemeinschaft zu
    schaffen. Die Kernkomponenten von Maven sind der deklarative Build, die
    Abhängigkeitsverwaltung (Dependency Management), Repository Verwaltung und
    breite Wiederverwendbarkeit durch den Einsatz von Plugins. Es sind aber
    die spezifische Inkarnationen dieser Ideen zu einem gegebenen Zeitpunkt
    weniger wichtig, als das Ziel dass die Open-Source-Community in
    Zusammenarbeit zur Verringerung der Ineffizienz von "Enterprise Scale
    Builds" beizutragen.</para>
  </section>

  <section id="installation-sect-compare-ant-maven">
    <title>Ein Vergleich von Maven und Ant</title>

    <para>Während der vorangegangene Abschnitt Ihnen verständlich gemacht
    haben sollte, dass die Autoren dieses Buches keinerlei Interesse an der
    Schaffung oder Vertiefung einer Fehde zwischen Apache Ant und Apache Maven
    haben, ist uns die Tatsache bewusst, dass die meisten Organisationen eine
    Entscheidung zwischen Ant und Maven treffen (müssen). In diesem Abschnitt
    werden wir daher diese beiden Werkzeuge gegenüberstellen.</para>

    <para>Ant läuft beim Build-Prozess zu seiner vollen Grösse auf: Es ist ein
    Build-System nach dem Vorbild von make mit Targets und Abhängigkeiten.
    Jeder Target besteht aus einer Reihe von Anweisungen, die in XML
    beschrieben werden. Es gibt eine Task copy, eine Task javac sowie eine
    Task JAR. Wenn Sie Ant benutzen, müssen Sie Ant mit der speziellen,
    spezifischen Anweisungen für die Zusammenstellung und dem Packaging Ihres
    Projektes aufrufen. Sehen Sie sich das folgende Beispiel einer einfachen
    Ant build.xml-Datei an:</para>

    <example id="ex-ant-sample">
      <title>Eine einfache Ant build.xml-Datei</title>

      <programlisting language="xml">&lt;project name="my-project" default="dist" basedir="."&gt;
    &lt;description&gt;
        simple example build file
    &lt;/description&gt;
  &lt;!-- set global properties for this build --&gt;
  &lt;property name="src" location="src/main/java"/&gt;
  &lt;property name="build" location="target/classes"/&gt;
  &lt;property name="dist"  location="target"/&gt;

  &lt;target name="init"&gt;
    &lt;!-- Create the time stamp --&gt;
    &lt;tstamp/&gt;
    &lt;!-- Create the build directory structure used by compile --&gt;
    &lt;mkdir dir="\${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="compile" depends="init"
        description="compile the source " &gt;
    &lt;!-- Compile the java code from \${src} into \${build} --&gt;
    &lt;javac srcdir="\${src}" destdir="\${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="dist" depends="compile"
        description="generate the distribution" &gt;
    &lt;!-- Create the distribution directory --&gt;
    &lt;mkdir dir="\${dist}/lib"/&gt;

    &lt;!-- Put everything in \${build} into the MyProject-\${DSTAMP}.jar file --&gt;
    &lt;jar jarfile="\${dist}/lib/MyProject-\${DSTAMP}.jar" basedir="\${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="clean"
        description="clean up" &gt;
    &lt;!-- Delete the \${build} and \${dist} directory trees --&gt;
    &lt;delete dir="\${build}"/&gt;
    &lt;delete dir="\${dist}"/&gt;
  &lt;/target&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>An diesem einfachen Beispiel eines Ant Skriptes, können Sie sehen,
    wie genau man definieren muss, was man von Ant erwartet. Ein Target ist
    javac, hier werden die Quelldateien in Binärdaten verarbeitet, dabei ist
    es wichtig, dass man genau angibt, wo die Quell- sowie Zieldateien
    abgelegt werden (<filename>/src/main/java</filename> resp.
    <filename>/target/classes</filename>). Ebenfalls müssen Sie Ant anweisen, aus den
    resultierenden Dateien ein JAR-Archiv zu erstellen. Während einige der
    neueren Entwicklungen dazu beitragen, dass Ant weniger prozedural
    orientiert arbeitet, ist die Entwickler-Erfahrung dennoch die, einer in
    XML abgefassten prozeduralen Programmiersprache.</para>

    <para>Vergleichen Sie das Vorgehen von Maven mit dem vorigen Beispiel: In
    Maven, um ein JAR-Archive aus einer Reihe von Java Quellcode Dateien zu
    erstellen, ist alles, was Sie tun müssen, ein einfaches POM (pom.xml
    Datei) zu generieren. Platzieren Sie den Quellcode in
    <filename>\${basedir}/src/main/java</filename> und führen Sie dann <command>mvn
    install</command> von der Befehlszeile aus . Das Beispiel der Maven
    pom.xml Datei, welches zum selben Ergebnis führt wie zuvor das Ant-Skript
    sehen Sie unten.</para>

    <example id="ex-maven-sample">
      <title>Muster einer Maven pom.xml-Datei</title>

      <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>Das ist alles was Sie in der zugehörigen pom.xml Datei benötigen.
    Der Aufruf von <command>mvn install</command> wird die Resourcen sowie
    Quelldateien kompilieren, bestehende Unit-Tests ausführen, JAR-Archive
    erstellen und dieses in einem lokalen Repository anderen Projekten zur
    Verfügung stellen. Ohne die pom.xml Datei abzuändern, können Sie durch den
    Aufruf von <command>mvn site</command> im Zielverzeichnis eine index.html
    wiederfinden, welche den Link zu einer Dokumentations-Web-Seite auf der
    Basis von JavaDoc sowie einigen Standard Reports bereitstellt.</para>

    <para>Zugegeben, dies ist das einfachste, mögliche Beispiel-Projekt. Ein
    Projekt, das nur Quellcode enthält und ein JAR-Archive erzeugt. Ein
    Projekt welches der Maven Konvention unterliegt und keinerlei
    Abhängigkeiten oder Anpassungen berücksichtigt. Sobald wir die
    Verhaltensweisen der Plugins anpassen wird unsere pom.xml Datei wachsen.
    In den grössten Projekten werden Sie komplexe Maven POMs finden, welche
    eine grosse Anzahl Plugin-Anpassungen sowie Abhängigkeitserklärungen
    enthalten. Aber, selbst wenn das POM Ihres Projekts erheblich wächst,
    enthält dies eine ganz andere Art von Daten und Informationen denn das
    Skript einer entsprechenden Ant-Datei. Maven POMs enthalten Deklarationen
    wie: "Dies ist eine JAR-Projekt", und "Der Quellcode ist unter
    <filename>/src/main/java</filename> abgelegt". Wohingegen Ant-Build-Dateien
    explizite Anweisung enthalten: "Dies ist ein Projekt", "Die Quelle ist in
    <filename>/src/main/java</filename>", "javac gegen dieses Verzeichnis ausführen",
    "Ablegen der Ergebnisse in <filename>/target/classses</filename>", "Erstellen
    eines JAR-Archives aus der. ...". Wo Ant genauen Prozess-Anweisungen
    bedurfte, gab es etwas innerhalb des Maven Builds, das einfach "wusste",
    wo der Quellcode zu finden ist und wie dieser zu verarbeiten ist.</para>

    <para>Die Unterschiede zwischen den Ant und Maven in diesem Beispiel
    sind:</para>

    <para><variablelist>
        <varlistentry>
          <term>Apache Ant</term>

          <listitem>
            <para><itemizedlist>
                <listitem>
                  <para>Ant kennt keine formalen Konventionen bezüglich einer
                  gemeinsamen Projekt Verzeichnis-Struktur. Sie müssen Ant
                  genau sagen, wo sich die Quelldateien befinden und wo die
                  Ausgabe abgelegt werden soll. Informelle Konventionen haben
                  sich im Laufe der Zeit herausgebildet, aber diese wurden
                  nicht im Produkt kodifiziert.</para>
                </listitem>

                <listitem>
                  <para>Ant ist Prozedural, Sie müssen Ant genau sagen, was zu
                  tun ist und wann dies zu tun. Sie mussten definieren: erst
                  kompilieren, dann kopieren, dann paketieren.</para>
                </listitem>

                <listitem>
                  <para>Ant kennt keinen Lebenszyklus, Sie mussten Targets
                  definieren und deren Abhängigkeiten. Sie mussten die Abfolge
                  der Schritte manuell für jeden Target festlegen.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Apache Maven</term>

          <listitem>
            <para><itemizedlist>
                <listitem>
                  <para>Maven arbeitet nach Konventionen. Da Sie diese
                  beachteten, wusste Maven wo Ihr Quellcode sich befand. Es
                  stellt den Bytecode unter <filename>target/classes</filename> und es
                  erzeugte ein JAR-Archive in <filename>/target</filename>.</para>
                </listitem>

                <listitem>
                  <para>Maven ist deklarative. Alles was Sie tun musste, war
                  eine pom.xml Datei zu erzeugen sowie Ihre Quelle im
                  Standard-Verzeichnis ablegen. Maven kümmerte sich um den
                  Rest.</para>
                </listitem>

                <listitem>
                  <para>Maven kennt einen Lebenszyklus, welchen Sie mit dem
                  Aufruf von <command>mvn install</command> angestossen haben.
                  Dieser Aufruf bringt Maven dazu, eine Abfolge von Schritten
                  abzuarbeiten, bis das Ende des Lebenszykluses erreicht ist.
                  Als Nebeneffekt dieser Reise durch den Lebenszyklus führt
                  Maven eine Reihe von Standard-Plugin-Goals aus, diese
                  erledigen Arbeiten wie z.B. kompilieren oder dem Erstellen
                  eines JAR-Archives.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Maven hat eine eingebaute Intelligenz bezüglich der gemeinsamen
    Projektaufgaben in Form von Maven-Plugins. Sollten Sie Unit Tests
    ausführen wollen, ist alles was Sie tun müssen, die Tests zu schreiben und
    unter <filename>\${basedir}/src/test/java</filename> abzulegen, führen Sie eine
    Test bezogene Abhängigkeit zu entweder TestNG oder JUnit ein, und starten
    Sie <command>mvn test</command>. Sollten Sie anstelle eines JAR-Archives
    eine Web Anwendung erstellen, so ist alles was Sie tun müssen den
    Projekttyp auf "war" umstellen und Ihr Applikationsverzeichnis (docroot)
    auf <filename>\${basedir}/src/main/webapp</filename> setzen. Klar, können Sie all
    dies auch mit Ant bewerkstelligen, aber Sie werden alle Anweisungen von
    Grund auf festhalten. In Ant würden Sie erst einmal herausfinden, wo die
    JUnit-JAR-Datei sich befindet, dann müssten Sie einen Klassenpfad
    erstellen welcher auch die JUnit-Archive Datei enthält, und anschliessend
    Ant mitteilen wo sich der Quellcode befindet. Schliesslich würden Sie
    einen Target erstellen die Quellen der Test Dateien zu kompilieren und zu
    guter Letzt die Tests mit JUnit auszuführen.</para>

    <para>Ohne Unterstützung von Technologien wie antlibs und Ivy (und auch
    mit diesen unterstützenden Technologien) stellt sich bei Ant das Gefühl
    eines prozeduralen Build Ablaufs ein. Eine effiziente Zusammenstellung
    einiger Maven POMs in einem Projekt welches sich an die Maven-Konventionen
    hält erzeugt überraschend wenig XML im Vergleich zur Ant-Alternative. Ein
    weiterer Vorteil von Maven ist die Abhängigkeit von weithin benutzten
    Maven-Plugins. Heutzutage benutzt jeder das Maven Surefire Plugin für
    Unit-Tests, sobald jemand ein weiteres Unit Test Framework einbindet,
    können Sie neue Fähigkeiten in Ihrem eigenen Build durch die einfache
    Änderung der Version eines einzelnen, bestimmten Maven Plugins
    nutzen.</para>

    <para>Die Entscheidung über die Verwendung Maven oder Ant ist heutzutage
    nicht binär. Ant hat noch immer einen Platz in in komplexen Builds. Wenn
    Ihr aktueller Build-Prozess einige sehr individuelle Prozesse enthält,
    oder wenn Sie etliche Ant-Skripte geschrieben haben um einen bestimmten
    Prozess in einer bestimmten Weise, die sich nicht an die Normen Maven
    hält, abzudecken, können Sie diese Skripte dennoch mit Maven abarbeiten.
    Ant wird als Kernkomponente in Form eines Plugins von Maven zur Verfügung
    gestellt. Benuzerdefinierte Maven-Plugins können in Ant geschrieben werden
    und Maven Projekte können so konfiguriert werden, das Ant-Skripte
    innerhalb des Maven-Projekt-Lebenszykluses abgearbeitet werden.</para>
  </section>

  <section id="installation-sect-introSummary">
    <title>Zusammenfassung</title>

    <para>Diese Einführung wurde absichtlich kurz gehalten. Wir haben Ihnen
    umrissen, was Maven ist und wie es zu einem guten Build-Prozess beiträgt,
    sowie über die Zeit hinweg diesen verbessern hilft. Im nächste Kapitel
    werden wir am Beispiel eines einfachen Projektes aufzeigen welche
    phänomenalen Aufgaben mit dem kleinstmöglich Aufwand an Konfiguration
    geleistet werden können.</para>
  </section>
</chapter>
