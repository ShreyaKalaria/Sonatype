<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="web">
  <title>Eine einfache Web-Anwendung </title>

  <section id="web-sect-intro">
    <title>Einleitung </title>

    <para>In diesem Kapitel erstellen wir mit Hilfe des Archetype Maven Plugin
    eine einfache Web-Anwendung. Wir führen diese Web-Applikation ein,
    benutzen hierfür einen Servlet-Container Jetty, fügen einige
    Abhängigkeiten ein, schreiben ein einfaches Servlet und erzeugen ein
    WAR-Archiv. Am Ende dieses Kapitels, werden Sie in der Lage sein Maven zur
    Beschleunigung der Entwicklung von Web-Applikationen einzusetzen.</para>

    <section id="web-sect-downloading">
      <title>Herunterladen der Beispiele dieses Kapitels</title>

      <para>Das Beispiel in diesem Kapitel wird mit dem Archetype Maven Plugin
      erzeugt. Während Sie in der Lage sein sollten, der Entwicklung dieses
      Kapitels ohne Beispiel-Quellcode zu folgen, empfehlen wir das
      Herunterladen einer Kopie der Quellcodes als Referenz. Das
      Beispielprojekt dieses Kapitel zusammen mit den anderen Beispielen
      dieses Buchs kann von
      http://books.sonatype.com/maven-book/mvn-examples-1.0.zip oder
      http://books.sonatype.com/maven-book/mvn-examples-1.0.tar.gz
      heruntergeladen werden. Entpacken Sie das Archiv in ein beliebiges
      Verzeichnis, und gehen Sie dann zum Verzeichnis <filename>/ch05</filename>. Darin finden Sie
      ein Verzeichnis mit dem Namen <filename>/simple web</filename> welches den Quellcode für
      dieses Kapitel enthält. </para>
    </section>
  </section>

  <section id="web-sect-defining-simple-web">
    <title>Eine kurze Einführung in die "Simple Web" Anwendung </title>

    <para>Wir haben dieses Kapitel gezielt auf Plain-Old Web Applikationen
    (POWA) konzentriert - ein Servlet und eine JSP-Seite. Wir werden Ihnen in
    den nächsten 20 Seiten sicher nicht zeigen wie Sie Ihre Struts 2,
    Tapestry, Wicket, JSF, oder Waffle Anwendung erstellen, auch nicht wie Sie
    die Integration eines IoC Containers wie Plexus, Guice oder Spring
    Framework bewerkstelligen. Das Ziel dieses Kapitels ist es, Ihnen die
    grundlegenden Möglichkeiten welche Maven zur Entwicklung von
    Web-Anwendungen bietet vorzustellen. Nicht mehr und nicht weniger! Später
    in diesem Buch, werden wir einen Blick auf die Entwicklung von zwei
    Web-Anwendungen werfen: einer, welche Hibernate, Velocity sowie das Spring
    Framework nutzt, und eine andere unter Verwendungen von Plexus.</para>
  </section>

  <section id="web-sect-creating-project">
    <title>Erstellen des "Simple Web" Projekts</title>

    <para>Um das Web Applikationsprojekt zu erstellen, führen Sie <command>mvn
    archetype:create</command> mit einer <varname>artifactId</varname> und einer <varname>groupId</varname> aus. Wählen Sie
    die <varname>archetypeArtifactId</varname> maven-archetype-webapp. Bei der Ausführung wird
    die entsprechende Verzeichnis-Struktur und das grundlegende Maven POM
    erstellt. </para>

    <screen>~/examples$ <command>mvn archetype:create -DgroupId=org.sonatype.mavenbook.ch05 \
                            -DartifactId=simple-webapp \
                            -DpackageName=org.sonatype.mavenbook \
                            -DarchetypeArtifactId=maven-archetype-webapp</command>
[INFO] [archetype:create]
[INFO] ----------------------------------------------------------------------
[INFO] Using parameters for creating Archetype: maven-archetype-webapp:RELEASE
[INFO] ----------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.mavenbook.ch05
[INFO] Parameter: packageName, Value: org.sonatype.mavenbook
[INFO] Parameter: basedir, Value: ~/examples
[INFO] Parameter: package, Value: org.sonatype.mavenbook
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: simple-webapp
[INFO] *************** End of debug info from resources from generated POM **
[INFO] Archetype created in dir: ~/examples/simple-webapp </screen>

    <para>Sobald das Archetype Maven Plugin das Projekt erstellt hat, gehen
    Sie in das Verzeichnis <filename>/simple-web</filename> und werfen Sie einen Blick auf die dort
    abgelegte pom.xml-Datei. Sie sollten das folgenden XML-Dokument
    vorfinden:</para>

    <example>
      <title>Erstes POM des "Simple Web" Projekt</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook.ch05&lt;/groupId&gt;
  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.5&lt;/source&gt;
          &lt;target&gt;1.5&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Beachten Sie dass das Element packaging den Wert 'war' enthält. Ein Projekt des Types
    war package, wird eine WAR-Datei im Zielverzeichnis erstellen, das
    standardmäßig den Namen <filename>\${artifactId}-\${version}.war</filename> trägt. Für dieses
    Projekt, wird das standardmäßige WAR in
    <filename>/target/simple-webapp-1.0-SNAPSHOT.war</filename> abgelegt. Im "Simple Web" Projekt
    haben wir den Namen der WAR-Datei vorbestimmt, indem wir ein Element
    <filename>finalName</filename> in die Projekt Build Konfiguration eingefügt haben. Mit dem
    finalName von 'simple-webapp' generiert die Phase package ein WAR-Archiv
    in <filename>/target/simple-webapp.war</filename>. </para>
  </section>

  <section id="web-sect-configuring-jetty">
    <title>Konfigurieren des Jetty-Plugins </title>

    <para>Sobald Sie Ihre Web Anwendung kompiliert, getestet und verpackt
    haben, werden Sie sie wahrscheinlich einen Servlet-Container einsetzen
    wollen und diese mit der vom Archetype Maven Plugin erstellten index.jsp-Datei
    testen wollen. Normalerweise wäre der Ablauf hierzu entsprechend:
    Herunterladen eines Containers wie etwas Jetty oder Apache Tomcat,
    Auspacken einer Distribution, Kopieren Ihres Anwendungs WAR-Archivs in ein
    <filename>/webapp</filename>-Verzeichnis, schliesslich starten des Containers.</para>
    <para>Obschon man
    das alles tun kann, gibt es keine Notwendigkeit, dies zu tun. Stattdessen
    können Sie das Jetty Maven Plugin einsetzen, und Ihre Web-Applikation aus
    Maven heraus starten. Um dies zu tun, müssen wir das Jetty Maven Plugin in
    unserem Projekt POM konfigurieren. Fügen Sie das folgende
    Plugin-Element Ihrer Projekt Build Konfiguration an:</para>

    <example>
      <title>Konfigurieren des Jetty-Plugins</title>

      <programlisting language="xml">&lt;project&gt;
  [...]
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  [...]
&lt;/project&gt;</programlisting>
    </example>

    <para>Nachdem Sie das Jetty Plugin in der Projekt pom.xml-Datei
    konfiguriert haben. können Sie das Goal <varname>jetty:run</varname> aufrufen, um Ihre Web
    Anwendung im Jetty Container zu starten. Rufen sie <command>mvn jetty:run</command> wie folgt
    auf:</para>

    <screen>~/examples$ <command>mvn jetty:run</command>
...
[INFO] [jetty:run]
[INFO] Configuring Jetty for project: simple-webapp Maven Webapp
[INFO] Webapp source directory = \
       ~/svnw/sonatype/examples/simple-webapp/src/main/webapp
[INFO] web.xml file = \
       ~/svnw/sonatype/examples/simple-webapp/src/main/webapp/WEB-INF/web.xml
[INFO] Classes = ~/svnw/sonatype/examples/simple-webapp/target/classes
2007-11-17 22:11:50.532::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /simple-webapp
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] Webapp directory = \
       ~/svnw/sonatype/examples/simple-webapp/src/main/webapp
[INFO] Starting jetty 6.1.6rc1 ...
2007-11-17 22:11:50.673::INFO:  jetty-6.1.6rc1
2007-11-17 22:11:50.846::INFO:  No Transaction manager found 
2007-11-17 22:11:51.057::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>Nach erfolgreichem Starten des Servlet-Containers durch Maven, laden
    Sie die URL http://localhost:8080/simple-webapp/ in einen Web-Browser. Die
    durch Archetype generierte <filename>index.jsp</filename>-Datei ist trivial: sie enthält eine
    Überschrift mit dem Text: "Hallo Welt!". Maven erwartet, dass das Document
    Root der Web-Applikation in <filename>/src/main/webapp</filename> liegt. In diesem Verzeichnis
    finden Sie auch die Datei <filename>index.jsp</filename> welche im Beispiel 5.3: "Inhalt von
    /src/main/webapp/index.jsp" aufgelistet wird. </para>

    <example id="web-example-index">
      <title>Inhalt von /src/main/webapp/index.jsp </title>

      <programlisting language="xml">&lt;html&gt;
  &lt;body&gt;
    &lt;h2&gt;Hello World!&lt;/h2&gt;
  &lt;/body&gt;
&lt;/html&gt;
</programlisting>
    </example>

    <para>Unter <filename>/src/main/webapp/WEB-INF</filename> finden Sie den kleinsten möglichen
    Web-Applikations Beschrieb; der web.xml. </para>

    <example>
      <title>Inhalt von src/main/webapp/WEB-INF/web.xml </title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
&lt;/web-app&gt;</programlisting>
    </example>
  </section>

  <section id="web-sect-adding-simple-servlet">
    <title>Das Hinzufügen eines einfachen Servlets </title>

    <para>Eine Web-Applikation mit einer einzigen JSP-Seite und keinen
    konfigurierten Servlets ist so gut wie nutzlos. Lassen Sie uns ein
    einfaches Servlet hinzufügen und die entsprechenden Änderungen in der
    pom.xml- sowie der web.xml-Datei vornehmen. Zu Beginn müssen wir ein neues
    Package namens <classname>com.sonatype.maven.web</classname> im Verzeichnis <filename>/src/main/java</filename>
    erstellen</para>

    <screen>$ <command>mkdir -p src/main/java/org/sonatype/mavenbook/web</command>
$ <command>cd src/main/java/org/sonatype/mavenbook/web</command></screen>

    <para>Sobald Sie dieses Package kreiert haben, wechseln Sie in das
    Verzeichnis (<filename>/src/main/java/com/sonatype/maven/web</filename>) und erstellen Sie eine
    Klasse <classname>SimpleServlet</classname> in einer Datei <filename>SimpleServlet.java</filename>, welche den
    folgenden Quellcode enthält. </para>

    <example>
      <title>SimpleServlet Klasse </title>

      <programlisting language="java">package org.sonatype.mavenbook.web;

import java.io.*;
import javax.servlet.*;                                                         
import javax.servlet.http.*;

public class SimpleServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
        throws ServletException, IOException {
    
        PrintWriter out = response.getWriter();
        out.println( "SimpleServlet Executed" );
        out.flush();
        out.close();
    }
}
</programlisting>
    </example>

    <para>Unsere Klasse SimpleServlet ist eben dies, ein einfaches Servlet,
    welches eine einfache Nachricht auf den responseWriter schreibt. Um dieses
    Servlet Ihrer Web-Anwendung hinzuzufügen und auf einen Anfragepfad
    abzubilden, fügen Sie die folgenden Servlet-und Servlet-Mapping-Elemente
    zu Ihrer Projekt web.xml-Datei an. Die web.xml-Datei finden Sie unter
    <filename>/src/main/webapp/WEB-INF</filename>. </para>

    <example>
      <title>Mapping the Simple Servlet</title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</programlisting>
    </example>

    <para>Nun ist alles vorhanden, um das Servlet zu testen, die Klasse
    befindet sich unter <filename>/src/main/java</filename> und die web.xml-Datei wurde
    aktualisiert. Bevor wir das Jetty-Plugin starten, kompilieren Sie Ihr
    Projekt, durch den Aufruf von <command>mvn compile</command>: </para>

    <screen>~/examples$ <command>mvn compile</command>
...
[INFO] [compiler:compile]
[INFO] Compiling 1 source file to ~/examples/ch05/simple-webapp/target/classes
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure

/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[4,0] \
  package javax.servlet does not exist

/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[5,0] \
  package javax.servlet.http does not exist

/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[7,35] \
  cannot find symbol
  symbol: class HttpServlet
  public class SimpleServlet extends HttpServlet {

/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[8,22] \
  cannot find symbol
  symbol  : class HttpServletRequest
  location: class org.sonatype.mavenbook.web.SimpleServlet

/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[9,22] \
  cannot find symbol
  symbol  : class HttpServletResponse
  location: class org.sonatype.mavenbook.web.SimpleServlet

/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[10,15] \
  cannot find symbol
  symbol  : class ServletException
  location: class org.sonatype.mavenbook.web.SimpleServlet
</screen>

    <para>Die Erstellung schlägt fehl, Ihr Maven-Projekt weist keine
    Abhängigkeit zum Servlet-API aus. Im nächsten Abschnitt werden wir diese
    hinzufügen und das Servlet-API in das Projekt POM eintragen. </para>
  </section>

  <section id="web-sect-adding-j2ee-depend">
    <title>Das Hinzufügen von J2EE-Abhängigkeiten </title>

    <para>Um ein Servlet zu schreiben benötigen Sie die
    Servlet-API-Spezifikation. Um die Servlet-API-Spezifikation als eine
    Abhängigkeit zu Ihrem Projekt POM hinzuzufügen, fügen Sie das folgende
    dependency Element Ihrer pom.xml an. </para>

    <example>
      <title>Einfügen der Servlet-Spezifikation 2.4 als Abhängigkeit </title>

      <programlisting language="xml">&lt;project&gt;
  [...]
  &lt;dependencies&gt;
    [...]
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  [...]
&lt;/project&gt;
</programlisting>
    </example>

    <para>Es ist auch darauf hinzuweisen, dass wir für diese Abhängigkeit den
    Geltungsbereich provided verwendet haben. Dies sagt Maven, dass das Archiv
    seitens des Containers bereitgestellt wird, und nicht in das war-Archiv
    einfliessen soll. Wenn Sie daran interessiert waren, ein
    benutzerdefiniertes JSP-Tag für dieses einfache Web-Anwendung zu
    erstellen, so bräuchten Sie eine Abhängigkeit zur JSP-Spezifikation 2.0.
    Verwenden Sie die folgende Konfiguration, um diese Abhängigkeit zu
    schaffen.</para>

    <example>
      <title>Hinzufügen der 2.0 JSP-Spezifikation als Abhängigkeit </title>

      <programlisting language="xml">&lt;project&gt;
  [...]
  &lt;dependencies&gt;
    [...]
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
      &lt;version&gt;2.0&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  [...]
&lt;/project&gt;
</programlisting>
    </example>

    <para>Sobald Sie die Servlet Spezifikationsimplementierung als
    Abhängigkeit hinzugefügt haben, führen Sie <command>mvn clean install</command> gefolgt von
    <command>mvn jetty:run</command> aus. </para>

    <screen>[tobrien@t1 simple-webapp]$ <command>mvn clean install</command>
...
[tobrien@t1 simple-webapp]$ <command>mvn jetty:run</command>
[INFO] [jetty:run]
...
2007-12-14 16:18:31.305::INFO:  jetty-6.1.6rc1
2007-12-14 16:18:31.453::INFO:  No Transaction manager found 
2007-12-14 16:18:32.745::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>An diesem Punkt sollten Sie in der Lage sein, die Ausgabe des
    SimpleServlet zu erhalten. Von der Befehlszeile können Sie mittels curl
    die Ausgabe des Servlet zur Standard-Ausgabe umleiten: </para>

    <screen>~/examples$ <command>curl http://localhost:8080/simple-webapp/simple</command>
SimpleServlet Executed
</screen>
  </section>

  <section id="web-sect-conclusion">
    <title>Zusammenfassung </title>

    <para>Nach dem Lesen dieses Kapitels sollten Sie in der Lage sein eine
    einfache Web-Applikation zu erstellen. In diesem Kapitel wurde nicht näher
    auf die Millionen verschiedener Möglichkeiten eingegangen wie man eine
    komplette Web-Anwendung erschafft. Weitere Kapitel werden einen
    umfassenderen Überblick über Projekte geben, bei denen einige der
    populären Web-Frameworks und Technologien zum Einsatz kommen.</para>
  </section>
</chapter>
