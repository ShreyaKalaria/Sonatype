<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="resource-filtering">
  <title>Properties and Ressource Filterung</title>

  <section id="resource-filtering-sect-intro">
    <title>Einleitung</title>

    <para>In diesem Buch finden Sie durchgängig Hinweise auf
    <emphasis>Properties</emphasis> (Eigenschaften) welche Sie in
    <acronym>POM</acronym>-Dateien referenzieren können. Auf geerbte
    Abhängigkeiten eines multi-projekt Builds kann mittels der Properties
    <varname>\${project.groupId}</varname> sowie
    <varname>\${project.version}</varname> zugegriffen werden und jeder
    Abschnitt eines <acronym>POM</acronym> kann referenziert werden indem man
    einer Variablen die Vorsilbe „<varname>project.</varname>“ Anfügt.
    Umgebungsvariablen und Java System Einstellungen können referenziert
    werden, wie auch alle Einstellungen aus Ihrer
    <filename>~/.m2/settings.xml</filename> Datei. Was Ihnen noch nicht auf
    den Weg gegeben wurde ist eine Aufstellung der möglichen Property
    Variablen, und eine Beschreibung wie diese zum Einsatz kommen um einen
    portablen Build zu erstellen. Dieses Kapitel nun liefert Ihnen diese
    Aufstellung.</para>

    <para>Sollten Sie bereits Property Referenzen in Ihrem
    <acronym>POM</acronym> einsetzen, so sollte Ihnen ebenfalls bewusst sein,
    dass Maven eine Funktionalität mit dem Namen Ressource Filter anbietet,
    welche Ihnen erlaubt, jegliche Property Referenz zu ändern, welche in
    einer Ressource Datei unter <filename>src/main/resources</filename>
    abgelegt ist. Standardmässig ist diese Funktion deaktiviert, um
    unbeabsichtigte Veränderung von Property Referenzen zu verhindern. Diese
    Funktionalität kann jedoch Einsatz finden, um einen Build auf eine
    bestimmte Plattform zu richten, oder um wichtige Property Einstellungen in
    Ressource Dateien, POMs oder Profilen zu externalisieren. Dieses Kapitel
    hat zum Ziel, die Funktionalität des Ressource Filtering darzustellen und
    gibt eine kurze Einführung wie diese zum Einsatz kommt um einen portablen
    Enterprise Build herzustellen.</para>
  </section>

  <section id="resource-filtering-sect-properties">
    <title>Maven Properties</title>

    <para>Sie können Maven Properties in einer <filename>pom.xml</filename>
    Datei, oder irgendeiner anderen Ressource ablegen, welche vom Maven
    Ressource Plugin und dessen Filter Funktion verarbeitet wird. Ein Property
    ist immer umschlossen von <varname>\${</varname> und <varname>}</varname> .
    Um auf das Property <varname>project.version</varname> zu referenzieren,
    würden Sie folgende Variable benutzen:</para>

    <programlisting language="java">\${project.version}</programlisting>

    <para>Es bestehen einige implizite Maven Properties, diese sind:</para>

    <variablelist>
      <varlistentry>
        <term><varname>project.*</varname></term>

        <listitem>
          <para>Maven Project Objekt Modell (<acronym>POM</acronym>). Benutzen
          Sie das Präfix <varname>project.*</varname> um Werte des Maven
          <acronym>POM</acronym> zu referenzieren.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>settings.*</varname></term>

        <listitem>
          <para>Maven Settings; Benutzen Sie das Präfix
          <varname>settings.*</varname> um Werte aus der lokalen Maven
          Settings Datei (gewöhnlich unter
          <filename>~/.m2/settings.xml</filename> zu referenzieren.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>env.*</varname></term>

        <listitem>
          <para>Umgebungsvariables wie z.B. <varname>PATH</varname> sowie
          <varname>M2_HOME</varname> können mittels dem Präfix
          <varname>env.*</varname> benannte werden.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>System Properties</term>

        <listitem>
          <para>Jeglicher Wert welcher durch die
          <methodname>System.getProperty()</methodname> Methode abgefragt
          werden kann, kann als Maven Property referenziert werden.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Zusätzlich zu den impliziten Properties wie oben dargestellt, können
    das Maven <acronym>POM</acronym>, die Maven Settings Datei sowie das Maven
    Profil weitere freidefinierte Werte enthalten. Der folgende Abschnitt wird
    Ihnen einigen Einblick in die verschiedenen in einem Maven Projekt
    verfügbaren Werte geben.</para>

    <section id="resource-filtering-sect-project-properties">
      <title>Maven Projekt Einstellungen</title>

      <para>Immer wenn ein Maven Projekt Property referenziert wird, zeigt der
      Name des Property auf einen Wert des Projekt Objekt Modell
      (<acronym>POM</acronym>). Genauer gesagt, Sie setzen eine Referenz auf
      ein Property der Klasse
      <classname>org.apache.maven.model.Model</classname> welche als implizite
      Projektvariable dargestellt wird. Wollen Sie sich auf ein Property
      dieser impliziten Variablen beziehen, so wenden Sie die einfache
      Punkt-Notation an, um auf ein Bean-Property des Modell-Objektes zu
      zeigen. Referenzieren Sie zum Beispiel
      <varname>\${project.version}</varname>, so rufen Sie tatsächlich die
      Methode <methodname>getVersion()</methodname> der Instanz des Modell
      Objektes auf, als welches das Projekt offengelegt wird.</para>

      <para>Das <acronym>POM</acronym> wird ebenfalls durch die Datei
      <filename>pom.xml</filename> dargestellt, welche in allen Maven
      Projekten präsent ist. Alle Bestandteile des Maven
      <acronym>POM</acronym> können als Property angesprochen werden. Eine
      komplette Referenz der POM Struktur finden Sie unter <ulink
      url="http://maven.apache.org/ref/2.0.9/maven-model/maven.html">http://maven.apache.org/ref/2.0.9/maven-model/maven.html</ulink>.
      In der folgenden Liste werden wir einige der häufiger gebrauchten
      Referenzen auf Maven Projekt Properties ausführen:</para>

      <variablelist>
        <varlistentry>
          <term><varname>project.groupId</varname>,
          <varname>project.version</varname></term>

          <listitem>
            <para>Projekte die Bestandteil eines grossen multi-modularen Build
            sind, benutzen häufig die selbe <varname>groupId</varname> und
            <varname>version</varname> Bezeichner. Sollten Sie Abhängigkeiten
            zwischen verschiedenen Modulen deklarieren welche die gleiche
            <varname>groupId</varname> und <varname>version</varname> tragen,
            so tun Sie gut daran, für beide eine Property Referenz zu
            definieren:</para>

            <programlisting language="xml">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
    &lt;artifactId&gt;sibling-project&lt;/artifactId&gt;
    &lt;version&gt;\${project.version}&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>project.artifactId</varname></term>

          <listitem>
            <para>Die <varname>artifactId</varname> eines Projektes wird oft
            als Name eines Paketes eingesetzt. So möchten Sie, im Falle eines
            Projektes das als <acronym>WAR</acronym> paketiert wird, ein
            <acronym>WAR</acronym> ohne Versionsbezug im Namen generieren. Um
            dies zu bewerkstelligen würden Sie
            <varname>project.artifactId</varname> wie folgt
            referenzieren:</para>

            <programlisting language="xml">&lt;build&gt;
  &lt;finalName&gt;\${project.artifactId}&lt;/finalName&gt;
&lt;/build&gt;</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>project.name,
          </varname><varname>project.description</varname></term>

          <listitem>
            <para>Der Name und die Projektbeschreibung sind ofmals nützliche
            Referenzen in einer Dokumentation. Anstatt sich damit abzumüchen,
            dass der gesamte Site die gleiche Kurzbeschreibung benutzt, ist es
            viel einfacher diese Werte zu referenzieren.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>project.build.*</varname></term>

          <listitem>
            <para>Sollten Sie sich auf Ausgabeverzeichnisse berufen müssen, so
            vermeiden Sie den Einsatz von direkten Bezügen zu den
            Verzeichnissen wie z.B. <filename>target/classes</filename>. Statt
            dessen sollten Sie Property Referenzen auf die Verzeichnisse
            setzen.</para>

            <itemizedlist>
              <listitem>
                <para><varname>project.build.sourceDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.scriptSourceDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.testSourceDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.outputDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.testOutputDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.directory</varname></para>
              </listitem>
            </itemizedlist>

            <para><varname>sourceDirectory</varname>,
            <varname>scriptSourceDirectory</varname>, und
            <varname>testSourceDirectory</varname> geben Ihnen Zugriff auf die
            Quellverzeichnisse des Projektes.
            <varname>outputDirectory</varname> sowie
            <varname>testOutputDirectory</varname> geben Ihnen Zugriff auf die
            Verzeichnisse, welche Maven nutzt um den Byte Code oder Build
            Output abzulegen. <varname>directory</varname> bezieht sich auf
            das Verzeichnis, das alle derartigen Ausgabeverzeichnisse
            umfasst.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Weitere Projekt Property Referenzes</term>

          <listitem>
            <para>Darüber hinaus gibt es hunderte Properties welche man
            innerhalb eines <acronym>POM</acronym> referenzieren kann. Eine
            vollständige Referenz des <acronym>POM</acronym> finden Sie unter
            <ulink
            url="http://maven.apache.org/ref/2.0.9/maven-model/maven.html">http://maven.apache.org/ref/2.0.9/maven-model/maven.html</ulink>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Sollten Sie eine vollständige Dokumentation der Maven Modell
      Objekt Properties benötigen, so bitte wir Sie auf die JavaDoc des
      Projektes <classname>maven-model</classname> zurückzugreifen, diese
      finden Sie unter: <ulink
      url="http://maven.apache.org/ref/2.0.9/maven-model/apidocs/index.html">http://maven.apache.org/ref/2.0.9/maven-model/apidocs/index.html</ulink>.
      Nach dem Laden der JavaDoc, sehen Sie sich die Klasse
      <classname>Model</classname> an. Von dieser Klasse aus sollten Sie alle
      von Ihnen gesuchten <acronym>POM</acronym> Properties ansteuern können.
      Sollten Sie das Ausgabeverzeichnis des Builds referenzieren wollen, so
      sehen Sie in der Maven Model JavaDoc, dass dieses mittels
      <methodname>model.getBuild().getOutputDirectory();</methodname> erfolgt.
      Diesen Methodenaufruf würden Sie in die Maven Property Referenz:
      <varname>\${project.build.outputDirectory}</varname> wiederfinden.</para>

      <para>Bezüglich weiterer Informationen zum Maven Model Module, dem
      Modul, welches die Struktur des <acronym>POM</acronym> definiert,
      möchten wir auf die Maven Model Seite unter <ulink
      url="http://maven.apache.org/ref/2.0.9/maven-model">http://maven.apache.org/ref/2.0.9/maven-model</ulink>
      verweisen.</para>
    </section>

    <section id="resource-filtering-sect-settings-properties">
      <title>Properties der Maven Einstellungen (settings.xml)</title>

      <para>Sie können auf jedes Property der lokalen Einstellungsdatei
      zugreifen, welche normalerweise unter
      <filename>~/.m2/settings.xml</filename> abgelegt ist. Diese Datei
      enthält benutzerspezifische Einstellungen bezüglich der Maven
      Installation wie z.B. dem Ort des lokalen Repository, der lokalen Server
      Infrastruktur, Profilen sowie Spiegel-Repositorien wie diese von einem
      Benutzer definiert wurden.</para>

      <para>Eine ausführliche Referenz der lokalen Einstellungen sowie der
      entsprechenden Properties finden Sie unter <ulink
      url="http://maven.apache.org/ref/2.0.9/maven-settings/settings.html">http://maven.apache.org/ref/2.0.9/maven-settings/settings.html</ulink>.</para>
    </section>

    <section id="resource-filtering-sect-enviroment-variable">
      <title>Properties der Umgebungsvariablen</title>

      <para>Umgebungsvariablen werden mit einem vorangestellten
      <varname>env.*</varname> eingeleitet. Einige der interessanteren
      Umgebungsvariablen sind in der folgenden Liste aufgeführt:</para>

      <variablelist>
        <varlistentry>
          <term><varname>env.PATH</varname></term>

          <listitem>
            <para>Enthält den aktuellen Pfad (<varname>PATH</varname>)in
            welchem Maven läuft. <varname>PATH</varname> enthält eine Liste
            von Verzeichnissen, in welchen ausführbare Skripte und Programme
            gesucht werden sollen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>env.HOME</varname></term>

          <listitem>
            <para>(Unter *nix Systemen) zeigt diese Variable auf das
            “Heimatverzeichnis” des Benutzers. Besser und portabler ist es
            statt dessen <varname>\${user.home}</varname> einzusetzen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>env.JAVA_HOME</varname></term>

          <listitem>
            <para>Enthält das Java Installationsverzeichnis. Dieses wird
            entweder auf einen Java Development Kit (<acronym>JDK</acronym>)
            oder auf eine Java Laufzeitumgebung (<acronym>JRE</acronym>)
            zeigen. Es empfiehlt sich statt dessen
            <varname>\${java.home}</varname> zu benutzen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>env.M2_HOME</varname></term>

          <listitem>
            <para>Beinhaltet das Maven 2 Installationsverzeichnis</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Solange die Java System Einstellungen verfügbar sind, sollten Sie
      diese einsetzen. Um auf das Heimatverzeichnis eines Benutzers
      zuzugreifen benutzen Sie <varname>\${user.home}</varname> statt
      <varname>\${env.HOME}</varname>. Sie erzeugen damit einen portablerern
      Build welcher dem Versprechen von
      <literal>Write-One-Run-Anywhere</literal> (<acronym>WORA</acronym>) der
      Java Plattform näherkommt.</para>
    </section>

    <section id="resource-filtering-sect-system-properties">
      <title>Java System Properties</title>

      <para>Maven legt alle Properties von
      <classname>java.lang.System</classname> offen. Alle Daten, welche Sie
      mittels <methodname>System.getProperty()</methodname> beziehen können,
      sind auch für Maven angreifbar. Die nachfolgende Tabelle führt die
      verfügbaren Properties auf:</para>

      <table>
        <title>Java System Properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>System Property</entry>

              <entry>Beschreibung</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>java.version</varname></entry>

              <entry>Java Laufzeitumgebung Version</entry>
            </row>

            <row>
              <entry><varname>java.vendor</varname></entry>

              <entry>Java Laufzeitumgebung Hersteller</entry>
            </row>

            <row>
              <entry>java.vendor.url</entry>

              <entry>Java Hersteller URL</entry>
            </row>

            <row>
              <entry><varname>java.home</varname></entry>

              <entry>Java Installationsverzeichnis</entry>
            </row>

            <row>
              <entry><varname>java.vm.specification.version</varname></entry>

              <entry>Java Virtual Machine Spezifikation Version</entry>
            </row>

            <row>
              <entry><varname>java.vm.specification.vendor</varname></entry>

              <entry>Java Virtual Machine Spezifikation Hersteller</entry>
            </row>

            <row>
              <entry><varname>java.vm.specification.name</varname></entry>

              <entry>Java Virtual Machine Spezifikation Name</entry>
            </row>

            <row>
              <entry><varname>java.vm.version</varname></entry>

              <entry>Java Virtual Machine Implementierung Version</entry>
            </row>

            <row>
              <entry><varname>java.vm.vendor</varname></entry>

              <entry>Java Virtual Machine Implementierung Hersteller</entry>
            </row>

            <row>
              <entry><varname>java.vm.name</varname></entry>

              <entry>Java Virtual Machine Implementierung Name</entry>
            </row>

            <row>
              <entry><varname>java.specification.version</varname></entry>

              <entry>Java Laufzeitumgebung Spezifikation Version</entry>
            </row>

            <row>
              <entry><varname>java.specification.vendor</varname></entry>

              <entry>Java Laufzeitumgebung Spezifikation Hersteller</entry>
            </row>

            <row>
              <entry><varname>java.specification.name</varname></entry>

              <entry>Java Laufzeitumgebung Spezifikation Name</entry>
            </row>

            <row>
              <entry><varname>java.class.version</varname></entry>

              <entry>Java Klassenformat Versionsnummber</entry>
            </row>

            <row>
              <entry><varname>java.class.path</varname></entry>

              <entry>Java Klassenpfad</entry>
            </row>

            <row>
              <entry><varname>java.ext.dirs</varname></entry>

              <entry>Pfad zum Verzeichnis der Erweiterungen</entry>
            </row>

            <row>
              <entry><varname>os.name</varname></entry>

              <entry>Betriebssystem Name</entry>
            </row>

            <row>
              <entry><varname>os.arch</varname></entry>

              <entry>Betriebssystem System Architekture</entry>
            </row>

            <row>
              <entry><varname>os.version</varname></entry>

              <entry>Betriebssystem System Version</entry>
            </row>

            <row>
              <entry><varname>file.separator</varname></entry>

              <entry>Datei Trennzeichen ("/" auf UNIX, "\" auf
              Windows)</entry>
            </row>

            <row>
              <entry><varname>path.separator</varname></entry>

              <entry>Pfad Trennzeichen (":" auf UNIX, ";" auf Windows)</entry>
            </row>

            <row>
              <entry><varname>line.separator</varname></entry>

              <entry>Zeilenumbruch ("\n" auf UNIX und Windows)</entry>
            </row>

            <row>
              <entry><varname>user.name</varname></entry>

              <entry>Benutzerkonto Name</entry>
            </row>

            <row>
              <entry><varname>user.home</varname></entry>

              <entry>Benutzerverzeichnis (home)</entry>
            </row>

            <row>
              <entry><varname>user.dir</varname></entry>

              <entry>Aktuelles Arbeitsverzeichnis (des Benutzers) </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="resource-filtering-sect-user-defined">
      <title>Benuzerdefinierte Properties</title>

      <para>Zusätzlich zu den implizit von <acronym>POM</acronym>, den Maven
      Einstellungen, Umgebungsvariablen und Java System Einstellungen
      bereitgestellten Properties haben Sie die Möglichkeit Ihre eigenen
      beliebigen Properties zu setzen. Properties können als Teil eines
      <acronym>POM</acronym> oder Profil definiert werden. Die Menge der
      Properties eines POMs oder Maven Profils kann wie alle anderen
      Properties in Maven angesprochen werden. Benutzerdefinierte Properties
      können innerhalb einer <acronym>POM</acronym> Datei referenziert werden,
      oder Sie können eingesetzt werden um Ressourcen mittels dem Maven
      Resource Plugin zu filtern. Hier ein Beispiel wie man ein beliebiges
      Property innnerhalb einer POM Datei definiert:</para>

      <example>
        <title>Definition eines benutzerdefinierten Property im POM</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;arbitrary.property.a&gt;This is some text&lt;/arbitrary.property.a&gt;
    &lt;hibernate.version&gt;3.3.0.ga&lt;/hibernate.version&gt;
  &lt;/properties&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.version}&lt;/version&gt;
    &lt;/dependency&gt;  
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>Das vorgehende Beispiel definiert zwei Properties:
      <varname>arbitrary.property.a</varname> und
      <varname>hibernate.version</varname>.
      <varname>hibernate.version</varname> wird innerhalb einer
      Abhängigkeitsdefinition eingesetzt. Der Einsatz des Punkt-Zeichens (.)
      als Trennzeichen in Propertynamen hat sich als gängige Schreibweise für
      Properties durchgesetzt; Für Maven ist
      „<varname>hibernate.version</varname>“ lediglich ein Schlüssel um den
      Wert „<varname>3.3.0.ga</varname>“ aufzufinden.</para>

      <example>
        <title>Definition eines benutzerdefinierten Property innerhalb einer
        Profildefinition im POM</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;some-profile&lt;/id&gt;
      &lt;properties&gt;
        &lt;arbitrary.property&gt;This is some text&lt;/arbitrary.property&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>Das vorangegangene Beispiel verdeutlicht wie man ein
      benutzerdefiniertes Property innerhalb einer Profildefinition eines
      Maven <acronym>POM</acronym> definiert. Weitere Details und
      Informationen bezüglich benutzerdefinierter Properties und Profilen
      finden sie im <xref linkend="profiles" /> (Kapitel 11: Build
      Profile).</para>
    </section>
  </section>

  <section id="resource-filtering-sect-description">
    <title>Ressource Filterung</title>

    <para>Sie können Maven auch dazu einsetzen, Variablen innerhalb von
    Projektressourcen zu ersetzen. Sobald Ressourcen Filterung aktiviert ist,
    durchsucht Maven Ressourcen nach Property Referenzen eingeschlossen in
    <varname>\${</varname> und<varname>}</varname>. Sobald es eine derartige
    Referenz gefunden hat, ersetzt es diese mit dem entsprechenden Wert ganz
    ähnlich wie dies auch mit den Property Referenzen eines
    <acronym>POM</acronym> geschieht und im letzen Abschnitt beschrieben
    wurde. Diese Möglichkeit ist insbesondere dann hilfreich, wenn es
    notwendig wird einen Build zu parametrisieren um verschiede
    Konfigurationen zu übergeben, abhängig von der entsprechenden
    Zielplattform.</para>

    <para>Oftmals wird eine Datei <filename>.properties</filename> oder ein
    <acronym>XML</acronym> Dokument unter
    <filename>/src/main/resources</filename> die Definition externer Ressource
    wie Datenbankverbindungen oder Netzwerkparameter enthalten, welche
    abhängig von der Zielplatform unterschiedlich konfiguriert werden müssen.
    So hat z.B. ein System welches von einer Datenbank lesen muss eine Datei
    welche die <acronym>JDBC URL</acronym> zusammen mit den entsprechenden
    Parametern für den Datenbankzugriff angibt. Benutzen Sie eine andere
    Datenbank während der Entwicklung als in der Produktion (was zu erwarten
    ist), so können Sie entweder diese Ressourcedefinition mittels einer
    Technologie wie z.B. <acronym>JNDI</acronym> externalisieren, oder aber
    Sie generieren einen Build welcher es versteht, die Zielplattform
    abhängigen Werte mit den entsprechenden Werten zu setzen.</para>

    <para>Unter Einsatz von Maven Ressource Filterung können Sie Maven
    Properties setzen und diese dann mittels Maven Profilen entsprechend der
    benötigten Zielplattform definieren. Um diese Möglichkeit zu illustrieren,
    hier ein Beispiel: gehen Sie davon aus, dass Ihr Projekt auf dem Spring
    Framework beruht, welches eine <classname>BasicDataSource</classname> aus
    dem <classname>CommonsDBCP</classname> Projekt konfiguriert. Ihr Projekt
    wird also unter <filename>src/main/resources</filename> eine Datei mit dem
    Namen <filename>applicationContext.xml</filename> ablegen, welche die in
    <xref linkend="ex-filter-spring" /> (Beispiel 13.3: Maven Properties aus
    einer Ressource Datei referenzieren) ausgeführten Daten enthält.</para>

    <example id="ex-filter-spring">
      <title>Maven Properties aus einer Ressource Datei referenzieren</title>

      <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;

    &lt;bean id="someDao" class="com.example.SomeDao"&gt;
        &lt;property name="dataSource" ref="dataSource"/&gt;
    &lt;/bean&gt;

    &lt;bean id="dataSource" destroy-method="close" 
             class="org.apache.commons.dbcp.BasicDataSource"&gt;
        &lt;property name="driverClassName" value="\${jdbc.driverClassName}"/&gt;
        &lt;property name="url" value="\${jdbc.url}"/&gt;
        &lt;property name="username" value="\${jdbc.username}"/&gt;
        &lt;property name="password" value="\${jdbc.password}"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</programlisting>
    </example>

    <para>Ihr Programm würde diese Datei zur Laufzeit lesen, und Ihr Build
    wird Referenzen auf Properties wie z.B. <varname>jdbc.url</varname> oder
    <varname>jdbc.username</varname> mit den Werten welche Sie in Ihrer
    <filename>pom.xml</filename>-Datei setzen ersetzen. Ressource Filterung
    ist standardmässig ausgeschaltet, um die unbewusste und ungewollte
    Filterung von Werten zu verhindern. Um den Ressource Filter einzustellen,
    müssen Sie das abgeleitete Element <varname>resource</varname> innerhalb
    ihrer <acronym>POM</acronym> Datei setzen. <xref
    linkend="ex-filter-pom" /> (Beispiel 13.4: Definieren von Variablen und
    Aktivierung von Ressource Filterung) illustriert ein
    <acronym>POM</acronym> welches die Variablen aus <xref
    linkend="ex-filter-spring" /> (Beispiel 13.3: Maven Properties aus einer
    Ressource Datei referenzieren) definiert und Ressource Filterung für alle
    Ressourcen unter <filename>src/main/resources</filename> aktiviert</para>

    <example id="ex-filter-pom">
      <title>Definieren von Variablen und Aktivierung von Ressource
      Filterung</title>

      <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;jdbc.driverClassName&gt;
      com.mysql.jdbc.Driver&lt;/jdbc.driverClassName&gt;
    &lt;jdbc.url&gt;jdbc:mysql://localhost:3306/development_db&lt;/jdbc.url&gt;
    &lt;jdbc.username&gt;dev_user&lt;/jdbc.username&gt;
    &lt;jdbc.password&gt;s3cr3tw0rd&lt;/jdbc.password&gt;
  &lt;/properties&gt;
  ...
  &lt;build&gt;
    &lt;resources&gt;
      &lt;resource&gt;src/main/resources&lt;/resource&gt;
      &lt;filtering&gt;true&lt;/filtering&gt;
    &lt;/resources&gt;
  &lt;/build&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;production&lt;/id&gt;
      &lt;properties&gt;
        &lt;jdbc.driverClassName&gt;oracle.jdbc.driver.OracleDriver&lt;/jdbc.driverClassName&gt;
        &lt;jdbc.url&gt;jdbc:oracle:thin:@proddb01:1521:PROD&lt;/jdbc.url&gt;
        &lt;jdbc.username&gt;prod_user&lt;/jdbc.username&gt;
        &lt;jdbc.password&gt;s00p3rs3cr3t&lt;/jdbc.password&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;  
  &lt;/profiles&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>Die vier entsprechenden Variablen werden jeweils innerhalb des
    Elements <varname>properties</varname> definiert und Ressource Filterung
    wird für Ressourcen unter <filename>src/main/ressources</filename>
    gesetzt. Da Ressource Filterung standardmässig deaktiviert ist, ist es
    notwendig für Ihr Projekt explizit den Wert des Elements
    <varname>filtering</varname> auf <varname>true</varname> zu setzen. Wenn
    Sie nun ein Projekt mit der Ressource aus <xref
    linkend="ex-filter-spring" /> (Beispiel 13.3: Maven Properties aus einer
    Ressource Datei referenzieren) und den POM Einträgen aus <xref
    linkend="ex-filter-pom" /> (Beispiel 13.4: Definieren von Variablen und
    Aktivierung von Ressource Filterung) builden und Sie dann den Inhalt der
    Ressource unter <filename>target/classes</filename> ansehen, so sollten
    Sie dort die folgende, gefilterte Ressource wiederfinden:</para>

    <screen>$ <command>mvn install</command>
...
$ <command>cat target/classes/applicationContext.xml</command>
...
    &lt;bean id="dataSource" destroy-method="close" 
             class="org.apache.commons.dbcp.BasicDataSource"&gt;
        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;
        &lt;property name="url" value="jdbc:mysql://localhost:3306/development_db"/&gt;
        &lt;property name="username" value="dev_user"/&gt;
        &lt;property name="password" value="s3cr3tw0rd"/&gt;
    &lt;/bean&gt;
...</screen>

    <para>Das <abbrev>POM</abbrev> aus <xref linkend="ex-filter-pom" />
    (Beispiel 13.4: Definieren von Variablen und Aktivierung von Ressource
    Filterung) definiert ebenfalls unter dem Element
    <varname>profiles/profile</varname> ein Profile
    <varname>production</varname>, welches das Standardprofil mit Werten
    welche für eine Produktionsumgebung sinnvoll sind, übersteuert. In diesem
    ausgeführten Beispiel definiert das <acronym>POM</acronym> Standardwerte
    für die Datenbankverbindung auf eine lokal installierte
    <productname>MySQL</productname> Instanz. Sollte der Build mit aktiviertem
    Profil <varname>production</varname> erstellt werden, so wird Maven das
    System derart konfigurieren, dass fortan das System gegen eine Oracle
    Datenbank mit anderen Treibern, URL, Benutzername und Passwort zum Zuge
    kommt. Wenn sie also den Build mit den oben ausgeführten Beispielen und
    aktivierten Profil <varname>production</varname> ausgeführt haben, so
    sollten Sie unter <filename>target/classes</filename> eine Ressource mit
    den unten aufgeführten produktiven Werten auffinden.</para>

    <screen>$ <command>mvn -Pproduction install</command>
...
$ <command>cat target/classes/applicationContext.xml</command>
...
    &lt;bean id="dataSource" destroy-method="close" 
             class="org.apache.commons.dbcp.BasicDataSource"&gt;
        &lt;property name="driverClassName" 
                     value="oracle.jdbc.driver.OracleDriver"/&gt;
        &lt;property name="url" value="jdbc:oracle:thin:@proddb01:1521:PROD"/&gt;
        &lt;property name="username" value="prod_user"/&gt;
        &lt;property name="password" value="s00p3rs3cr3t"/&gt;
    &lt;/bean&gt;
...</screen>
  </section>
</chapter>
