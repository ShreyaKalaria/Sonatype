<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="eclipse">
  <title>Maven in Eclipse: m2eclipse</title>

  <section id="eclipse-sect-intro">
    <title>Einführung</title>

    <para>Die <ulink url="http://www.eclipse.org/">Eclipse</ulink>
    <acronym>IDE</acronym> ist heutzutage wohl die Entwicklungsumgebung mit
    der grössten Verbreitung. Es gibt eine riesige Anzahl verfügbarer Plugins
    (<ulink
    url="http://www.eclipseplugincentral.com/">http://www.eclipseplugincentral.com/</ulink>)
    und eine unzählbar grosse Anzahl Organisationen welche deren Software auf
    Eclipse entwickeln. Einfach ausgedrückt: Eclipse ist allgegenwärtig. Das
    <ulink url="http://m2eclipse.codehaus.org/">m2eclipse</ulink> Projekt
    bietet eine Maven Unterstützung von innerhalb der Entwicklungsumgebung. In
    diesem Kapitel werden wir die Möglichkeiten welche uns dieses Werkzeug
    bietet erkunden.</para>
  </section>

  <section id="eclipse-sect-m2eclipse">
    <title>m2eclipse</title>

    <para>Das m2eclipse Plugin (<ulink
    url="http://m2eclipse.codehaus.org/">http://m2eclipse.codehaus.org/</ulink>)
    bietet eine Mavenintegration für Eclipse. M2eclipse bietet ebenfalls
    Möglichkeiten die Funktionen von zwei weiteren Plugins, dem Subclipse
    Plugin (<ulink
    url="http://subclipse.tigris.org/">http://subclipse.tigris.org</ulink>)
    sowie dem Mylin Plugin (<ulink
    url="http://www.eclipse.org/mylyn/">http://www.eclipse.org/mylyn</ulink>)
    zu nutzen. Das Subclipse Plugin bietet dem m2eclipse Plugin die
    Möglichkeit direkt mit einem Subversion Repositorien zu interagieren und
    das Mylyn Plugin erweitert das m2eclipse Plugin um mit dem weit
    verbreiteten Mylyn Interface zu zu interagieren. Dieses hilft die
    Übersicht im Entwicklungszusammenhang zu behalten. Hier eine Reihe
    Funktionalitäten welche m2eclipse bietet:</para>

    <para><itemizedlist>
        <listitem>
          <para>Erstellen sowie importieren von Maven Projekten</para>
        </listitem>

        <listitem>
          <para>Abhängigkeitsverwaltung und Integration mit dem Eclipse
          Klassenpfad</para>
        </listitem>

        <listitem>
          <para>Automatischer Download von Abhängigkeiten und deren Update
          </para>
        </listitem>

        <listitem>
          <para>Artefakt JavaDoc sowie Quellen Auflösung </para>
        </listitem>

        <listitem>
          <para>Erstellen von Projekten basierend auf Maven Artefakten </para>
        </listitem>

        <listitem>
          <para>Durchsuchen und Suchen in entfernten Maven Repositorien</para>
        </listitem>

        <listitem>
          <para><acronym>POM</acronym> Verwaltung mit automatischem Update der
          Abhängigkeitsliste</para>
        </listitem>

        <listitem>
          <para>Materialisierung ausgehend von einem Maven
          <acronym>POM</acronym></para>
        </listitem>

        <listitem>
          <para>Auschecken eines Maven Projektes von mehreren verteilten
          <acronym>SCM</acronym> Repositorien</para>
        </listitem>

        <listitem>
          <para>Anpassen von verschachtelten multi-modularen Maven Projekten
          auf die Entwicklungsumgebung Eclipse</para>
        </listitem>

        <listitem>
          <para>Integration mit dem Web Tools Projekt
          (<acronym>WTP</acronym>)</para>
        </listitem>

        <listitem>
          <para>Integration mit AspectJ Development Tools
          (<acronym>AJDT</acronym>)</para>
        </listitem>

        <listitem>
          <para>Integration mit Subclipse</para>
        </listitem>

        <listitem>
          <para>Integration mit Mylyn</para>
        </listitem>

        <listitem>
          <para>Formularbasierter <acronym>POM</acronym> Editor</para>
        </listitem>

        <listitem>
          <para>Graphische Darstellung des Abhängigkeitsgraphen</para>
        </listitem>

        <listitem>
          <para><acronym>GUI</acronym> Darstellung des Abhängigkeitsbaumes und
          der aufgelösten Abhängigkeiten</para>
        </listitem>
      </itemizedlist>Es gibt über diese Liste hinaus gibt es noch viele
    weitere Funktionalitäten welche m2eclipse bietet. Dieses Kapitel wird Sie
    in einige der eindrucksvolleren Fähigkeiten einführen, welche derzeit
    verfügbar sind. Lassen Sie uns damit beginnen, das m2eclipse Plugin zu
    installieren.</para>
  </section>

  <section id="eclipse-sect-installing">
    <title>Installation des m2eclipse Plugins</title>

    <para>Um das m2eclipse Plugin lauffähig zu installieren, müssen etliche
    Voraussetzungen erfüllt sein. Sie müssen mindestens auf <emphasis>Eclipse
    3.2</emphasis> aufsetzen, mindestens <emphasis><acronym>JDK</acronym>
    1.4</emphasis> benutzen und sicherstellen, dass Sie auf einem
    <acronym>JDK</acronym> und nicht nur einer Java Runtime
    (<acronym>JRE</acronym>) basieren. Sobald Sie Eclipse sowie einen
    entsprechenden <acronym>JDK</acronym> am Laufen haben, müssen Sie zunächst
    noch zwei Plugins installieren: <emphasis>Subclipse</emphasis> und
    <emphasis>Mylyn</emphasis>.</para>

    <section id="eclipse-sect-prereq">
      <title>Installieren der Voraussetzungen</title>

      <para>Sie können die Voraussetzungen zusammen mit m2eclipse
      installieren: fügen Sie einfach die den Komponennten entsprechenden
      Update Sites in Eclipse an. Um diese Komponenten dann zu installieren,
      wählen Sie <guiicon>Hilfe</guiicon><guisubmenu> &gt;Software
      Updates</guisubmenu><guimenuitem> &gt;Suchen und
      Installieren...</guimenuitem> Es wird die
      Update-/Installationsschaltfläche anzeigen. Wählen Sie „nach neuen zu
      installierenden Features suchen“ und wählen Sei
      „<guibutton>weiter</guibutton>“. Die Anzeige wird auf „xxx“ wechseln.
      Wählen Sie „<guibutton>Neuer Remote Site</guibutton>“ und fügen Sie für
      jede Komponente die entsprechende Site hinzu, stellen Sie sicher dass
      der entsprechende Eintrag ausgewählt ist. Zum Abschluss wird Eclipse
      ihnen anbieten die ausgewählten Komponenten zu installieren. Eclipse
      wird diese dann herunterladen, installieren und konfigurieren.</para>

      <para>Sollten Sie die neuere Version Eclipse 3.4 (Ganymede) benutzen, so
      wird die Plugin-Installation leicht von dieser Beschreibung abweichen:
      unter Ganymede wählen Sie <guimenu>Hilfe</guimenu> &gt;
      <guimenuitem>Software Updates</guimenuitem> und öffnen hiermit den
      Dialog: „xxx“. Innerhalb dieses Fensters wählen Sie die
      „<guibutton>Verfügbare Software</guibutton>“ und dann „<guibutton>Site
      hinzufügen</guibutton>“ welches den Dialog „Site hinzufügen" öffnen
      wird. Geben Sie die <acronym>URL</acronym> des Sites welchen Sie
      hinzufügen möchten ein und bestätigen mit "<guibutton>OK</guibutton>".
      Im Dialogfenster „Software Updates and Add-Ons" werden die entsprechend
      verfügbaren Plugins der hinzugefügten Sites erscheinen. Sie können nun
      die entsprechenden Module auswählen und installieren. Eclipse wird die
      entsprechenden Abhängigkeiten auflösen und gegebenenfalls darum bitten
      die Software Lizenzbedingungen zu akzeptieren. Nach der Installation
      wird Eclipse Sie wahrscheinlich aufrufen Eclipse einem Neustart zu
      unterziehen.</para>

      <section id="eclipse-sect-install-subclipse">
        <title>Installation von Subclipse</title>

        <para>Um Subclipse zu installieren, benutzen Sie den unten
        aufgeführten Eclipse Plugin Update Site:</para>

        <para><itemizedlist>
            <listitem>
              <para>Subclipse 1.2: <ulink
              url="http://subclipse.tigris.org/update_1.2.x">http://subclipse.tigris.org/update_1.2.x</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>Um andere Versionen von Subclipse zu installieren, oder um
        weitere Informationen bezüglich des Subclipse Plugin zu erlagen,
        wenden Sie sich and den Subclipse Projekt Website: <ulink
        url="http://subclipse.tigris.org/">http://subclipse.tigris.org/</ulink>.</para>
      </section>

      <section id="eclipse-sect-install-mylyn">
        <title>Installation von Mylyn</title>

        <para>To install JIRA integration with Mylyn, add the Mylyn extras
        Eclipse update URL, you'll want to do this if your organization uses
        <ulink url="http://www.atlassian.com/software/jira/">Atlassian's
        JIRA</ulink> for issue tracking. To install Mylyn use the following
        update sites:</para>

        <para>Um die JIRA Integration mittels Mylyn zu installieren, fügen Sie
        die Update Site der Eclipse Mylyn Extras hinzu. Dies werden Sie
        insbesondere tun wollen, wenn Ihre Organisation Atlassian JIRA Issue
        Tracking einsetzt. Um Mylyn zu installieren, benutzen Sie einen der
        folgenden Update Sites:</para>

        <para><itemizedlist>
            <listitem>
              <para>Mylyn (Eclipse 3.3): <ulink
              url="http://download.eclipse.org/tools/mylyn/update/e3.3">http://download.eclipse.org/tools/mylyn/update/e3.3
              </ulink></para>
            </listitem>

            <listitem>
              <para>Mylyn (Eclipse 3.4): <ulink
              url="http://download.eclipse.org/tools/mylyn/update/e3.4">http://download.eclipse.org/tools/mylyn/update/e3.4</ulink></para>
            </listitem>

            <listitem>
              <para>Mylyn Extras (JIRA Support): <ulink
              url="http://download.eclipse.org/tools/mylyn/update/extras">http://download.eclipse.org/tools/mylyn/update/extras</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>Um weitere Informationen bezüglich des Mylyn Plugin zu erlagen,
        wenden Sie sich and den Mylin Projekt Website: <ulink
        url="http://www.eclipse.org/mylyn/">http://www.eclipse.org/mylyn/</ulink>.</para>
      </section>

      <section id="eclipse-sect-install-aspectj">
        <title>Installation der AspectJ Development Tools (AJDT)</title>

        <para>Sollten Sie die Version 0.9.4 von m2eclipse installieren, so
        werden Sie eventuell auch die beiden Erweiterungen: Web Tools Platform
        (<acronym>WTP</acronym>) sowie AspectJ Development Tools
        (<acronym>AJDT</acronym>) installieren wollen. Um
        <acronym>AJDT</acronym> zu installieren, benutzen Sie:</para>

        <para><itemizedlist>
            <listitem>
              <para>AJDT (Eclipse 3.3): <ulink
              url="http://download.eclipse.org/tools/ajdt/33/update">http://download.eclipse.org/tools/ajdt/33/update</ulink></para>
            </listitem>

            <listitem>
              <para>AJDT (Eclipse 3.4): <ulink
              url="http://download.eclipse.org/tools/ajdt/34/dev/update">http://download.eclipse.org/tools/ajdt/34/dev/update</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>Um weitere Informationen bezüglich des AspectJ Development Tools
        zu erlagen, wenden Sie sich and den <acronym>AJDT</acronym> Projekt
        Website: <ulink
        url="http://www.eclipse.org/ajdt/">http://www.eclipse.org/ajdt/</ulink>.</para>
      </section>

      <section id="eclipse-sect-install-wtp">
        <title>Installation der Web Tools Platform (WTP)</title>

        <para>To install the Web Tools Platform (<acronym>WTP</acronym>). Use
        one of the following update URLs in Eclipse, or just look for the Web
        Tools Project in the Discovery Site which should already be in your
        Eclipse remote update sites list.</para>

        <para>Um die Web Tools Platform (<acronym>WTP</acronym>) zu
        installieren, benutzen Sie die unten stehende Update URL in Eclipse
        oder suchen Sie das Web Tools Project innerhalb des Discovery Site
        welcher bereits Teil der Eclipse Remote Update Site Liste sein
        sollte.</para>

        <para><itemizedlist>
            <listitem>
              <para>WTP: <ulink
              url="http://download.eclipse.org/webtools/updates/">http://download.eclipse.org/webtools/updates/</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>Um weitere Informationen bezüglich der Web Tools Platform zu
        erlagen, wenden Sie sich and den WTP Projekt Website <ulink
        url="http://www.eclipse.org/webtools/">http://www.eclipse.org/webtools/</ulink>.</para>
      </section>
    </section>

    <section id="eclipse-sect-install-m2eclipse">
      <title>Installation von m2eclipse</title>

      <para>Sobald Sie diese Voraussetzungen erfüllt haben und die oben
      aufgeführten Komponenten installiert haben, können Sie mit der
      Installation von m2Eclipse fortfahren. Benutzen Sie hierzu die folgende
      Update URL:</para>

      <para><itemizedlist>
          <listitem>
            <para>m2eclipse Plugin: <ulink
            url="http://m2eclipse.sonatype.org/update/">http://m2eclipse.sonatype.org/update/</ulink></para>
          </listitem>
        </itemizedlist>Sollten Sie den neusten Entwickler Snapshot Release des
      Plugins bevorzugen, wählen Sie stattdessen die Update Development
      <acronym>URL</acronym>:</para>

      <para><itemizedlist>
          <listitem>
            <para>m2eclipse Plugin (Development Snapshot): <ulink
            url="http://m2eclipse.sonatype.org/update-dev/">http://m2eclipse.sonatype.org/update-dev/</ulink></para>
          </listitem>
        </itemizedlist></para>

      <para>Um das m2eclipse Plugin zu installieren, wählen Sie
      <guimenu>Hilfe</guimenu> &gt; <guisubmenu>Software Update</guisubmenu>
      &gt; <guimenuitem>Suchen und Installieren …</guimenuitem> Es wird die
      Update-/Installationsschaltfläche angezeigt. Wählen Sie „nach neuen zu
      installierenden Features suchen“ und wählen Sei
      „<guibutton>weiter</guibutton>“. Die Anzeige wird auf „xxx“ wechseln.
      Wählen Sie „Neuer Remote Site“ und fügen Sie die oben angegebene Site
      hinzu. Stellen Sie sicher, dass der entsprechende Eintrag ausgewählt
      ist. Zum Abschluss wird Eclipse ihnen anbieten m2eclipse zu
      installieren. Eclipse wird die Komponente dann herunterladen,
      installieren und konfigurieren.</para>

      <para>Mit der erfolgreichen Installation des Plugins sollten Sie unter
      <guimenu>Windows</guimenu> &gt; <guimenu>Preferences</guimenu> in der
      Liste der Optionen einen Eintrag "Maven" finden. </para>
    </section>
  </section>

  <section id="eclipse-sect-enabling-console">
    <title>Aufschalten der Maven Konsole</title>

    <para>Vor wir nun tatsächlich anfangen die Möglichkeiten des m2eclipse
    Plugins auszuleuchten, lassen Sie uns zunächst die Maven Konsole
    aufschalten. Öffnen Sie die Konsolenansicht (<guimenu>Windows</guimenu>
    &gt; <guisubmenu>Ansichten</guisubmenu> &gt;
    <guimenuitem>Konsole</guimenuitem>). Wählen Sie den kleinen Pfeil rechts
    vom Symbol Konsole öffnen und dort "Maven Konsole"; wie unten
    dargestellt:</para>

    <figure>
      <title>Aufschalten der Maven Konsole in Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_console.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Die Maven Konsole gibt alle Ausgaben wieder, welche normalerweise
    auf dem Konsolenfenster ausgegeben werden, wenn Maven von der Befehlszeile
    gestartet wird. Dies ist sehr nützlich um zu sehen was Maven gerade macht,
    oder um Debugausgaben zu analysieren und Probleme anzusehen.</para>
  </section>

  <section id="eclipse-sect-creating-project">
    <title>Erstellen eines Maven Projekts</title>

    <para>Beim Einsatz von Maven werden Projekte gewöhlich durch den Einsatz
    von Maven Archetypen erstellt. Innerhalb von Eclipse werden neue Projekte
    durch den „Neue Projekte Wizard“ erstellt. Der Eclipse "Neues
    Projekt"-Wizard bietet eine Fülle verschiedener Vorlagen um neue Projekte
    zu erstellen! Das m2eclipse Plugin baut auf diesen Wizard auf, und bietet
    die folgenden zusätzlichen Möglichkeiten:</para>

    <para><itemizedlist>
        <listitem>
          <para>Auschecken eines Maven Projekts aus einem
          <acronym>SCM</acronym> Repository</para>
        </listitem>

        <listitem>
          <para>Erstellen eines Maven Projekts auf der Basis eines Maven
          Archetyps</para>
        </listitem>

        <listitem>
          <para>Erstellen einer Maven <acronym>POM</acronym> Datei </para>
        </listitem>
      </itemizedlist></para>

    <para>Wie in <xref linkend="fig-eclipse-new" /> (Abbildung 14.2:
    "Erstellen eines Neuen Projekts mit Hilfe des m2eclipse Wizards")
    dargestellt, sind alle drei Möglichkeiten für einen Entwickler von
    Interesse. Lassen Sie uns diese Möglichkeiten im Einzelnen genauer
    ansehen.</para>

    <figure id="fig-eclipse-new">
      <title>Erstellen eines Neuen Projekts mit Hilfe des m2eclipse
      Wizards</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_create-wizard.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <section id="eclipse-sect-checking-out-scm">
      <title>Auschecken eines Maven Projektes von einem SCM Repository</title>

      <para>m2eclipse bietet die Möglichkeit Projekte direkt aus einem SCM
      Repository auszuchecken. Geben Sie einfach die SCM Daten des Projektes
      ein und m2eclipse wird das Projekt an den von Ihnen angegebenen Ort
      auschecken. Dies ist in <xref linkend="fig-eclipse-new-checkout" />
      (Abbildung 14.3: "Auschecken eines Projekts aus Subversion" beispielhaft
      dargestellt:</para>

      <figure id="fig-eclipse-new-checkout">
        <title>Auschecken eines Projekts aus Subversion</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_checking-out.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Es bestehen zusätzlichen Optionen als Teil dieses Dialogs. Diese
      Ermöglichen Ihnen eine bestimmte Version auszuwählen, entweder indem Sie
      im Katalog des Subversion Repository auswählen, oder einfach durch die
      manuelle Eingabe Revisionsnummer. Diese Funktionalitäten bauen auf
      Funktionen des Subclipse Plugins auf, um mit dem Subclipse Repository zu
      interagieren. Darüber hinaus unterstützt das m2eclipse Plugin die
      folgenden SCM Anbieter:</para>

      <para><itemizedlist>
          <listitem>
            <para>Bazaar</para>
          </listitem>

          <listitem>
            <para>Clearcase</para>
          </listitem>

          <listitem>
            <para>CVS</para>
          </listitem>

          <listitem>
            <para>git</para>
          </listitem>

          <listitem>
            <para>hg</para>
          </listitem>

          <listitem>
            <para>Perforce</para>
          </listitem>

          <listitem>
            <para>Starteam</para>
          </listitem>

          <listitem>
            <para>Subversion</para>
          </listitem>

          <listitem>
            <para>Synergy</para>
          </listitem>

          <listitem>
            <para>Visual SourceSafe</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section id="eclipse-sect-m2e-create-archetype">
      <title>Erstellen eines Maven Projekts auf der Basis eines Maven
      Archetyps</title>

      <para>m2eclipse ermöglicht ein Maven Projekt auf der Basis eines Maven
      Archetyps zu erstellen. Es bestehen sehr viele verschiedene Maven
      Archetypen, diese werden bereits in der Auswahlliste des m2eclipse
      aufgeführt werden, wie aus der <xref
      linkend="fig-eclipse-new-archetype" /> (Abbildung 14.4: "Erstellen eines
      Neuen Projektes auf der Basis eines Maven Archetyps" ersichtlich
      wird:</para>

      <figure id="fig-eclipse-new-archetype">
        <title>Erstellen eines Neuen Projektes auf der Basis eines Maven
        Archetyps</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_new-maven.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Die Liste der aufgeführten Muster aus <xref
      linkend="fig-eclipse-new-archetype" /> (Abbildung 14.4: "Erstellen eines
      Neuen Projektes auf der Basis eines Maven Archetyps") ist eine
      Aufzählung welche von einem Werkzeug genannt Nexus Indexer erzeugt
      wurde. Nexus ist ein Repository Manager auf welchen in <xref
      linkend="repository-manager" /> (Kapitel 16: "Repository Manager") näher
      eingegangen wird. Der Nexus Indexer ist eine Datei die einen Index über
      das gesamte betrachtete Maven Repository darstellt. m2eclipse benutzt
      diese um alle bereitstehenden Archetypen des gesamten Maven Repository
      darzustellen. Als dieses Kapitel das letzte Mal angepasst wurde, wurden
      bereits ca. 90 verschiedene Muster im Archetypdialog dargestellt.
      Darunter besonders erwähnenswert sind:</para>

      <para><itemizedlist>
          <listitem>
            <para>Die Standardarchetypen von Maven zur Erstellung von</para>

            <itemizedlist>
              <listitem>
                <para>Maven Plugins</para>
              </listitem>

              <listitem>
                <para>Einfache Web Anwendungen</para>
              </listitem>

              <listitem>
                <para>Einfache Projekte</para>
              </listitem>

              <listitem>
                <para>Neue Maven Archetypen</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><ulink
            url="http://databinder.net/site/show/overview">Databinder</ulink>
            Archetypen (datengetriebene Wicket Anwendungen) unter
            <varname>net.databinder</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://cocoon.apache.org/">Apache Cocoon</ulink>
            Archetypen unter <varname>org.apache.cocoon</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://directory.apache.org">Apache Directory
            Server</ulink> Archetypen unter
            <varname>org.apache.directory.server</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://geronimo.apache.org">Apache
            Geronimo</ulink> Archetypen unter
            <varname>org.apache.geronimo.buildsupport</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://myfaces.apache.org">Apache
            MyFaces</ulink> Archetypen unter
            <varname>org.apache.myfaces.buildtools</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://tapestry.apache.org">Apache
            Tapestry</ulink> Archetypen unter
            <varname>org.apache.tapestry</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://wicket.apache.org">Apache Wicket</ulink>
            Archetypen unter <varname>org.apache.wicket</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://appfuse.org/display/APF/Home">AppFuse</ulink>
            Archetypen unter <varname>org.appfuse.archetypes</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://cargo.codehaus.org/">Codehaus
            Cargo</ulink> Archetypen unter
            <varname>org.codehaus.cargo</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://castor.codehaus.org/">Codehaus
            Castor</ulink> Archetypen unter
            <varname>org.codehaus.castor</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://groovy.codehaus.org/GMaven">Groovy-based
            Maven Plugin</ulink> Archetypen (deprecated)<footnoteref
            linkend="foot-gmaven" /> unter
            <varname>org.codehaus.mojo.groovy</varname></para>
          </listitem>

          <listitem>
            <para>Jini Archetypen</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://mule.mulesource.org/display/MULE/Home">Mule</ulink>
            Archetypen unter <varname>org.mule.tools</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://fractal.objectweb.org/index.html">Objectweb
            Fractal</ulink> Archetypen unter
            <varname>org.objectweb.fractal</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://petals.objectweb.org/index.html">Objectweb
            Petals</ulink> Archetypen unter
            <varname>org.objectweb.petals</varname></para>
          </listitem>

          <listitem>
            <para>ops4j Archetypen unter <varname>org.ops4j</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.parancoe.org/">Parancoe</ulink> unter
            <varname>org.parancoe</varname></para>
          </listitem>

          <listitem>
            <para>slf4j Archetypen unter <varname>org.slf4j</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.springframework.org">Springframework</ulink>
            <acronym>OSGI</acronym> sowie Web Services Archetypen unter
            <varname>org.springframework</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.trailsframework.org/">Trails
            Framework</ulink> Archetypen unter
            <varname>org.trailsframework</varname></para>
          </listitem>
        </itemizedlist></para>

      <para><footnote id="foot-gmaven">
          <para>[4] Verzichten Sie auf den Einsatz des Groovy Maven Plugin des
          Codehaus Mojo Projekt. Jason Dillon hat inzwischen die Groovy Maven
          Integrationsbemühungen in das Groovy Projekt von Codehaus
          verschoben. Für weitere Informationen wenden Sie sich an <ulink
          url="http://groovy.codehaus.org/GMaven">http://groovy.codehaus.org/GMaven</ulink>.</para>
        </footnote>And these were just the archetypes that were listed under
      the Nexus Indexer Catalog, if you switch Catalogs you'll see other
      archetypes. While your results may vary, the following additional
      archetypes were available in the Internal Catalog:</para>

      <para>Und dies sind nur die Archetypen welche vom Nexus Indexer Katalog
      afugeführt werden, sollten Sie einen anderen Katalog auswählen, so
      werden Sie weitere Archetypen kennen lernen. Die Resultate werden
      unterschiedlich von Fall zu Fall unterschiedlich sein, im internen
      Katalog waren zum Beispiel folgende zusätzlichen Muster verfügbar:
      <itemizedlist>
          <listitem>
            <para><ulink url="http://www.atlassian.com">Atlassian
            Confluence</ulink> Plugin Archetype unter
            <varname>com.atlassian.maven.archetypes</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://struts.apache.org">Apache Struts</ulink>
            Archetypen unter <varname>org.apache.struts</varname></para>
          </listitem>

          <listitem>
            <para>Apache Shale Archetypen unter
            <varname>org.apache.shale</varname></para>
          </listitem>
        </itemizedlist></para>

      <para>Ein Katalog ist einfach eine Referenz auf einen Repository Index.
      Sie können die Menge aller Kataloge welche vom m2eclipse Plugin
      berücksichtigt werden verwalten, indem Sie neben der Drop Down Box des
      Kataloges den Knopf <guibutton>Configure…</guibutton> auswählen. Sollten
      Sie Ihren eigenen Archetyp einem Katalog zufügen wollen, so wählen Sie
      <guibutton>Add Archetype …</guibutton></para>

      <para>Sobald Sie einen Archetypen ausgewählt haben, wird Maven den
      entsprechenden Artefakten aus dem Maven Repository holen und ein
      entsprechendes Eclipse Projekt erstellen.</para>
    </section>

    <section id="eclipse-sect-creating-module">
      <title>Erstellen eines Maven Moduls</title>

      <para>m2eclipse bietet auch die Möglichkeit ein Maven Modul zu
      erstellen. Dies ist beinahe identisch zur Erstellung eines Maven
      Projektes, da es ebenfalls ein Maven Projekt auf der Basis eines
      Archetypen erstellt. Jedoch ist ein Maven Modul ein Unterprojekt zu
      einem anderen Maven Projekt, das gemeinhin als übergeordnetes oder
      elterliches Projekt bezeichnet wird.</para>

      <figure id="fig-eclipse-new-module">
        <title>Erstellen eines neuen Maven Modules</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_new-module.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Beim Erstellen eines neuen Maven Moduls müssen Sie ein
      übergeordnetes Projekt auswählen, welches bereits innerhalb der
      Entwicklungsumgebung existiert. Die Auswahl des Buttons
      <guibutton>Browse</guibutton> zeigt eine Liste der bereits bestehenden
      Projekte wie in <xref linkend="fig-eclipse-select-parent" /> (Abbildung
      14.6: "Auswahl eines übergeordneten Projektes eines neues Maven Modul")
      dargestellt.</para>

      <figure id="fig-eclipse-select-parent">
        <title>Auswahl eines übergeordneten Projektes eines neues Maven
        Modul</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_select-project.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Nach der Auswahl eines übergeordneten Projektes aus der Liste
      werden Sie auf das "Neues Maven Modul"-Fenster zurückgeleitet, dort ist
      nun das Feld Übergeordnetes Projekt ausgefüllt wie in <xref
      linkend="fig-eclipse-new-module" /> (Abbildung 14.5: "Erstellen eines
      neuen Maven Moduls") dargestellt. Mit der Auswahl von
      <guibutton>Weiter</guibutton> werden Sie zur Liste der Maven Archetypen
      wie in <xref linkend="eclipse-sect-m2e-create-archetype" /> (14.5.2:
      "Erstellen eines Maven Projekts auf der Basis eines Maven Archetyp")
      ausgeführt. Sie können dabei auswählen auf der Basis welchen Musters das
      neue Maven Modul erstellt werden soll.</para>
    </section>
  </section>

  <section id="eclipse-sect-creating-pom">
    <title>Erstellen einer Maven POM Datei</title>

    <para>Eine weitere wichtige Funktionalität des m2eclipse-Plugins ist es
    <acronym>POM</acronym>-Dateien zu erstellen. m2eclipse stellt einen Wizard
    bereit, um für ein bestehendes Projekt eine POM Datei zu erstellen. Dieser
    POM Wizard wird in <xref linkend="fig-eclipse-create-pom" /> (Abbildung
    14.7: Erstellen eines neuen POMs) dargestellt:</para>

    <figure id="fig-eclipse-create-pom">
      <title>Abbildung 14.7: Erstellen eines neuen POMs</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_create-pom.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Zu einem bestehenden Projekt ein neues Maven POM zu erstellen ist
    einfach: Auswählen des Projektes, Eingabe der <varname>groupID</varname>,
    <varname>artefactID</varname> sowie <varname>version</varname>, Auswahl
    des Paketierungstyps und Vergabe eines Namens in den dafür vorgesehenen
    Feldern des m2eclipse Wizards. Wählen Sie <guibutton>weiter</guibutton> um
    Abhängigkeiten zuzufügen.</para>

    <figure id="fig-eclipse-add-dependencies">
      <title>Hinzufügen von Abhängigkeiten zu einer neuen POM Datei</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_additional-depends.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Wie Sie leicht aus <xref linkend="fig-eclipse-add-dependencies" />
    (Abbildung 14.8: "Hinzufügen von Abhängigkeiten zu einer neuen POM Datei")
    ersehen, sind zunächst keine Abhängigkeiten enthalten. Wählen Sie zufügen
    um das zentrale Maven Repository nach Abhängigkeiten zu durchsuchen. Dies
    ist in der nächsten Abbildung, <xref linkend="fig-eclipse-query-depend" />
    (Abbildung 14.9: "Durchsuchen des Zentralen Repositories nach
    Abhängigkeiten") dargestellt:</para>

    <figure id="fig-eclipse-query-depend">
      <title>Durchsuchen des Zentralen Repositories nach
      Abhängigkeiten</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_add-dependency.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Nach Abhängigkeiten zu suchen ist einfach; geben Sie die
    <varname>groupId</varname> des benötigten Artefakten ein. <xref
    linkend="fig-eclipse-query-depend" /> (Abbildung 14.9: "Durchsuchen des
    Zentralen Repositories nach Abhängigkeiten") stellt die Abfrage nach
    <classname>org.apache.commons</classname> dar, wobei
    <varname>commons-vfs</varname> geöffnet ist, um zu sehen welche Versionen
    verfügbar sind. Die Auswahl der <varname>1.1-SNAPSHOT</varname> Version
    von <varname>commons-vfs</varname> und nachfolgende Auswahl von
    <guibutton>Ok</guibutton> führt Sie zurück in den Dialog zur Auswahl der
    Abhängigkeiten, wo Sie dann weitere Abhängigkeiten hinzufügen können, oder
    via <guibutton>Abschliessen</guibutton> das POM erstellen können. Bei der
    Suche nach Abhängigkeiten macht m2eclipse Gebrauch von dem gleichen Nexus
    Repository Index, welcher auch von Nexus Index Manager aus <xref
    linkend="repository-manager" /> (Kapitel 16: "Repository Manager") benutzt
    wird.</para>

    <para>Jetzt, da Sie die Funktionalität welche m2eclipse zur Erstellung
    eines neuen Projektes bietet gesehen haben, lassen Sie uns die verwandten
    Funktionen zum Import von Projekten ansehen:</para>
  </section>

  <section id="eclipse-sect-importing-projects">
    <title>Importieren von Maven Projekten</title>

    <para>m2eclipse bietet dreierlei Möglichkeiten Maven Projekte in Eclipse
    zu importieren:</para>

    <para><itemizedlist>
        <listitem>
          <para>Importieren eines existierenden Maven Projekts</para>
        </listitem>

        <listitem>
          <para>Auschecken eines Maven Projektes aus einem SCM Repository
          </para>
        </listitem>

        <listitem>
          <para>Materialisieren eines Maven Projektes</para>
        </listitem>
      </itemizedlist></para>

    <para><xref linkend="fig-eclipse-import" /> (Abbildung 14.10: "Importieren
    eines Maven Projektes") stellt den Wizard zum Import von Projekten mit den
    zugehörigen Optionen, welche Maven durch das m2eclipse Plugin
    bereitstellt, dar.</para>

    <figure id="fig-eclipse-import">
      <title>Importieren eines Maven Projektes</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%" fileref="figs/web/eclipse_import.png"
                     scale="" scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Die Dialogbox aus <xref linkend="fig-eclipse-import" /> (Abbildung
    14.10: "Importieren eines Maven Projektes") kann über
    <guiicon>Datei</guiicon> &gt; <guimenu>Importieren</guimenu> und
    anschliessendem Filtern mit dem Schlüsselbegriff <varname>maven</varname>,
    innerhalb von Eclipse aufgerufen werden. Wie oben erwähnt bieten sich drei
    Möglichkeiten ein Maven Projekt zu in Eclipse zu importieren: Maven
    Projekte Importieren, Auschecken eines Maven Projektes aus einem
    Repository und Materialisieren von Maven Projekten.</para>

    <para>Importieren eines Maven Projektes aus einem SCM Repository ist
    identisch zur Funktionalität "Erstellen eines Maven Projektes aus einem
    SCM Repository" welche vorgängig Diskutiert wurde; eine weitere Behandlung
    ist überflüssig. Lassen Sie uns weitergehen zu den zwei verbleibenden
    Möglichkeiten ein Maven Projekt zu importieren.</para>

    <section id="eclipse-sect-importing-a-maven-project">
      <title>Importiren eines Maven Projektes</title>

      <para>m2eclipse kann ein Projekt mit bestehender
      <filename>pom.xml</filename>-Datei importieren. Durch Angabe des
      Verzeichnisses in welchem das Maven Projekt abgelegt wurde, ist
      m2eclipse in der Lage alle Maven POMs des Projekts zu finden und eine
      hierarchische Liste dieser aufzustellen. Diese ist in <xref
      linkend="fig-eclipse-import-multi" /> (Abbildung 14.11: "Importieren
      eines multi-modularen Maven Projektes") dargestellt:</para>

      <figure id="fig-eclipse-import-multi">
        <title>Importieren eines multi-modularen Maven Projektes </title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_import-project.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para><xref linkend="fig-eclipse-import-multi" /> (Abbildung 14.11:
      "Importieren eines multi-modularen Maven Projektes") zeigt die
      Darstellung des zu importierenden Projektes. Bitte beachten Sie, dass
      alle POMs des Projektes in hierarchischer Darstellung wiedergegeben
      werden. Das erlaubt Ihnen auf einfache Art und Weise genau auszuwählen,
      welche POMs (und damit Projekte) Sie in Eclipse importieren möchten.
      Haben Sie erst einmal die Projekte welche Sie importieren möchten
      ausgewählt, nimmt Ihnen m2eclipse den Import und das Builden der
      Projekte mit der Unterstützung von Maven ab.</para>
    </section>

    <section id="eclipse-sect-materializing-project">
      <title>Materialisieren eines Maven Projektes</title>

      <para>Eine weitere Funktionalität welche m2eclipse bietet ist die
      Materialisierung eines Projektes. Materialisierung ist ähnlich dem
      Auschecken eines Projektes aus einem SCM Repository, jedoch, anstatt die
      URL des Repository manuell einzugeben, wird diese aus der obersten POM
      Datei des Projektes gelesen. Sie können diese Funktionalität dazu
      benutzen, Projekte aus nichts weiter als einer pom.xml Datei, welche die
      entsprechenden Elemente enthält, zu erstellen. Mit dieser Möglichkeit
      ist es Ihnen gegeben, das Maven Repository zu durchstreifen und die
      enthaltenen Projekte in Eclipse zu materialisieren. Dies ist
      insbesondere nützlich, sollte Ihr Projekt von einer Open Source Library
      abhängig ist, und Sie versuchen an dessen Quellen zu gelangen. Statt
      mühsam den Projekt-Website herauszufinden und festzustellen, wie Sie
      diese aus dem Repository auschecken können, benutzen Sie einfach
      m2eclipse um das Projekt zu materialisieren.</para>

      <para><xref linkend="fig-eclipse-materialize" /> (Abbildung 14.12:
      "Materialisieren eines Maven Projektes") stellt den Wizard nach der
      Auswahl des zu materialisierenden Projekts dar:</para>

      <figure id="fig-eclipse-materialize">
        <title>Materialisieren eines Maven Projektes</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_import2.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Beachten Sie, dass die Dialogbox der Maven Artefakte in <xref
      linkend="fig-eclipse-materialize" /> (Abbildung 14.12: "Materialisieren
      eines Maven Projektes") leer ist. Dies ist so, da noch keine Projekte
      ausgewählt wurden. Um ein Projekt hinzuzufügen müssen Sie auf der
      rechten Seite den Button "<guibutton>Hinzufügen</guibutton>" auswählen
      und einen Abhängigkeit aus dem zentralen Maven Repository auswählen.
      Dies ist in <xref linkend="fig-eclipse-select-materialize" /> (Abbildung
      14.13: "Auswahl eines Artefakten zum Materialisieren"),
      dargestellt.</para>

      <figure id="fig-eclipse-select-materialize">
        <title>Auswahl eines Artefakten zum Materialisieren</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_add-depend.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Auf die Eingabe einer Auswahl hin werden die möglichen
      Abhängigkeiten im Maven Repository gesucht. Nach wenigen Momenten
      Indexierung des lokalen Repositories wird eine Liste der möglichen
      Artefakte wiedergegeben. Wählen Sie den entsprechendne Kandidaten eines
      Projektes aus, so dass dieser zur Liste hinzugefügt werden kann, wie
      dies in <xref linkend="fig-eclipse-materialize-camel" /> (Abbildung
      14.14: "Materialisieren von Apache Camel") gezeigt wird.</para>

      <figure condition="" id="fig-eclipse-materialize-camel">
        <title>Materialisieren von Apache Camel</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_import-camel.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Nach dem hinzufügen der Abhängigkeit bietet Ihnen das m2eclipse
      die Möglichkeit alle Projekte des Artefaktes auszuchecken.</para>
    </section>
  </section>

  <section id="eclipse-sect-running-maven-builds">
    <title>Starten von Maven Builds</title>

    <para>m2eclipse wird auch die Menüs „<guibutton>Run as …</guibutton>“
    sowie „<guibutton>Debug as …</guibutton> “ anpassen, um Ihnen zu
    ermöglichen Maven Builds zu starten. <xref linkend="fig-m2e-runas" />
    (Abbildung 14.15: "Starten eines Eclipse Builds durch „Run as…“ ") stellt
    das „<guibutton>Run as…</guibutton>“ Menü eines m2eclispse Projektes dar.
    Ausgehend von diesem Menü können Sie eine Anzahl Maven Lebenszyklusphasen
    wie z. B. clean, install und package direkt starten. Sie können auch den
    Run-Konfigurationsdialog aufrufen und dort spezifische Maven
    Buildparameter und/oder weitere Optionen setzen.</para>

    <figure id="fig-m2e-runas">
      <title>Starten eines Eclipse Builds durch „Run as…“ </title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_run-menu.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Beabsichtigen Sie einen Maven Build mit erweiterter Konfiguration zu
    erstellen, so können Sie <guibutton>Run Configuration…</guibutton>
    auswählen und einen neuen Maven Build erstellen. <xref
    linkend="fig-m2e-runconf" /> (Abbildung 14.16: "Konfiguration eines Maven
    Builds mittels "Run Configurations..." ") stellt den Run Dialog vor</para>

    <figure id="fig-m2e-runconf">
      <title>Konfiguration eines Maven Builds mittels "Run Configurations..."
      </title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_run-config.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Der “<guibutton>Run Configuration ...</guibutton>” Dialog erlaubt
    es, mehrere Goals sowie Profile darzustellen, es werden
    Auswahlmöglichkeiten wie „<guibutton>Test auslassen (skip
    test)</guibutton>“ oder „<guibutton>Update Snapshots</guibutton>“ und
    erlaubt Ihnen Parameter ausgehend vom denen des Projektes bis hin zur
    unterliegenden Java Runtime Umgebung (JRE) oder den Umgebungsvariablen zu
    setzen. Sie können diese Dialogseite benutzen um jeden beliebigen
    massgeschneiderten Maven Build mittels m2eclipse zu starten.</para>
  </section>

  <section id="eclipse-sect-working-maven-projects">
    <title>Mit Maven Projekten arbeiten</title>

    <para>Das m2eclipse bietet auch eine Reihe Funktionalitäten um mit Maven
    Projekten zu arbeiten sobald diese in Eclipse geladen sind. Viele dieser
    Funktionen erleichtern das Arbeiten mit Maven, lassen Sie uns diese näher
    ansehen: Im vorhergehenden Abschnitt materialisierte ich ein Projekt und
    wählte ein Unterprojekt von Apache Camel aus;
    <varname>camel-core</varname>. Wie werden die verschiedenen Möglichkeiten
    anhand dieses Projektes verdeutlichen.</para>

    <para>Wählen Sie mit der rechten Maustaste den Menüpunkt
    <guibutton>Maven</guibutton> auf dem <classname>camel-core</classname>
    Projekt, so können Sie die verfügbaren Maven Funktionen sehen. <xref
    linkend="fig-eclipse-available-features" /> (Abbildung 14.17: "Verfügbare
    Maven Funktionen") stellt dies dar:</para>

    <figure id="fig-eclipse-available-features">
      <title>Verfügbare Maven Funktionalitäten</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_available-features.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Notice in <xref linkend="fig-eclipse-available-features" /> the
    available Maven features for the camel-core project, including:</para>

    <para>Beachten Sie in <xref linkend="fig-eclipse-available-features" />
    (Abbildung 14.17: "Verfügbare Maven Funktionalitäten") die verfügbaren
    Möglichkeiten des <varname>camel-core</varname> Projektes, diese
    umfassen</para>

    <para><itemizedlist>
        <listitem>
          <para>Hinzufügen von Abhängigkeiten sowie Plugins </para>
        </listitem>

        <listitem>
          <para>Updaten von Abhängigkeiten, Snapshots sowie
          Quellverzeichnissen</para>
        </listitem>

        <listitem>
          <para>Erstellen eines Maven Moduls</para>
        </listitem>

        <listitem>
          <para>Herunterladen von Quelldateien</para>
        </listitem>

        <listitem>
          <para>Öffnen von Projekt URLs wie z. B. der Projekt Web Page, dem
          Issue Tracker, SCM oder Continuous Integration Werkzeugen.</para>
        </listitem>

        <listitem>
          <para>Zuschalten/Abschalten der Workspace Auflösung, verschachteltem
          Modul- und Abhängigkeitsmanagement</para>
        </listitem>
      </itemizedlist></para>

    <para>Diese Funktionalitäten können uns Zeit sparen, und so lassen Sie uns
    diese genauer ansehen.</para>

    <section id="eclipse-sect-adding-updating">
      <title>Zufügen und Updaten von Abhängigkeiten und Plugins</title>

      <para>Nehmen wir einmal an, wir wollen zum <varname>camel-core</varname>
      POM eine Abhängigkeit oder ein Plugin hinzufügen. Der Demonstration
      halber fügen wir <classname>commons-lang</classname> als Abhängigkeit
      hinzu. (Da die Funktionalität zum Hinzufügen von Abhängigkeiten und
      Plugins genau dieselbe ist, werden wir beispielhaft lediglich eine
      Abhängigkeit hinzufügen).</para>

      <para>m2eclipse bietet zwei Möglichkeiten eine Abhängigkeit dem Projekt
      zuzufügen. Die erste ist, die <filename>pom.xml</filename>-Datei direkt
      durch hinzufügen des entsprechenden XML Elements abzuändern. Der
      Nachteil dieses Ansatzes ist, dass Sie bereits die Informationen
      bezüglich der Artefakte im Detail wissen müssen, oder alternativ die
      Funktionen welche im nächsten Abschnitt dargestellt werden benutzen
      müssten um diese in den Repository Indexen zu finden. Der Vorteil ist,
      dass nach einer manuellen Änderung und Speicherung des Projekt POM der
      Maven Abhängigkeits-Container automatisch die Neuerungen reflektiert.
      <xref linkend="fig-eclipse-manual-add" /> (Abbildung 14.18: "Manuelles
      Zufügen einer Abhängigkeit zum Projekt POM") zeigt, wie ich eine
      Abhängigkeit zu <classname>commons-lang</classname> zum POM der
      <classname>camel-console</classname> zugefügt habe und der Maven
      Abhängigkeits-Container dies automatisch reflektiert und somit
      darstellt:</para>

      <figure id="fig-eclipse-manual-add">
        <title>Manuelles Zufügen einer Abhängigkeit zum Projekt POM</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_add-manual-depend.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Nach dem manuelen Zufügen des Elements
      <varname>dependency</varname> an das POM, zeigt die Statusanzeige in der
      rechten unteren Ecke die Hintergrundaktion wie in <xref
      linkend="fig-eclipse-update-depends" /> (Abbildung 14.19: "Updaten von
      Maven Abhängigkeiten") dargestellt, an:</para>

      <figure id="fig-eclipse-update-depends">
        <title>Updaten von Maven Abhängigkeiten</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_updating-depends.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Manuelles Zufügen von Abhängigkeiten funktioniert gut, aber
      benötigt mehr Arbeit als dies die zweite Möglichkeit erfordert. Diese
      Möglichkeit ist viel einfacher, sie setzt nicht voraus, dass Sie
      irgendwelche Informationen über die der <varname>groupId</varname> der
      Artefakte hinaus haben. <xref linkend="fig-eclipse-search-depend" />
      (Abbildung 14.20: "Suchen einer Abhängigkeit") stellt dies dar:</para>

      <figure id="fig-eclipse-search-depend">
        <title>Suchen einer Abhängigkeit</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_add-depend3.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Durch eintragen einer groupId in das Abfragefeld durchsucht
      m2eclipse die Indexe der Repositorien sowie die Versionen der Artefakte
      welche sich bereits im lokalen Maven Repository befinden. Dies ist die
      bevorzugte Möglichkeit, da es enorme Zeitersparnisse birgt. Mit
      m2eclipse gehört die langwierige Suche durch die zentralen Maven
      Repositorien der Vergangenheit an.</para>
    </section>

    <section id="eclipse-sect-creating-maven-module">
      <title>Erstellen eines Maven Modules</title>

      <para>m2eclipse bringt eine enorme Erleichterung zur Erstellung eines
      verschachtelten Unterprojektes innerhalb eines multi-modularen Maven
      Projektes. Sollten Sie ein übergeordnetes Maven Projekt bearbeiten und
      Sie wollen ein Unterprojekt erstellen, so machen Sie einen Rechts-Click
      auf dem Projekt, gehen Sie zum Maven Menü und wählen „<guimenu>Neues
      Maven Modul Projekt</guimenu>". m2eclipse wird Sie durch die Schritte
      zum Erstellen eines Untermoduls führen, das POM erstellen, das
      elterliche POM anpassen und in den Bezügen reflektieren. Vor es
      m2eclipse gab war es sehr schwierig, innerhalb von Eclipse mit
      hierarchisch geschachtelten Projektbäumen zu arbeiten. Mittels m2eclipse
      wurden die darunterliegenden Beziehungen zwischen Über und
      Unterprojekten in die Entwicklungsumgebung eingebunden.</para>
    </section>

    <section id="eclipse-sect-downloading-source">
      <title>Herunterladen der Quelldatei(en)</title>

      <para>Sollte das zentrale Maven Repository eine Quelldatei der
      Artefakten beinhalten, so können Sie diese mittels Maven herunterladen
      und in Eclipse bereitstellen. Beim Versuch eine komplexe Anwendung zu
      Debuggen, ist es manchmal äusserst nützlich, kann man den zu einem
      bestehenden externen Quellcode einer Abhängigkeit durch einen einfachen
      Rechts-Click herunterladen und zu debuggen. Wählen Sie diese Funktion,
      so wird Maven für Sie versuchen dies zu tun. Ist es nicht möglich, so
      sollten Sie den Verantwortlichen des Projektes darauf aufmerksam machen,
      dass dieser im zentralen Maven Repository die entsprechenden
      Quelldateien hinterlegen.</para>
    </section>

    <section id="eclipse-sect-opening-project-pages">
      <title>Öffnen von Projektseiten</title>

      <para>Das Maven POM enthält einige sehr nützliche URLs welche einen
      Entwickler interesieren mögen: Diese sind die Projekt Webseite, der Link
      auf das SCM Repository, eine URL auf eine Continuous Integrations
      Instanz (Dienst wie z.B. Hudson) sowie eine URL, welche auf das
      entsprechende Issue Tracking System zeigt. Sind diese Variablen im POM
      gesetzt, so öffnet m2eclipse die entsprechenden Seiten innerhalb eines
      Browserfensters.</para>
    </section>

    <section id="eclipse-sect-resolving-dependencies">
      <title>Auflösen von Abhängigkeiten</title>

      <para>Sie können ein Projekt so konfigurieren, dass dieses die
      Abhängigkeiten innerhalb Ihres Workspace auflöst. Das hat den
      Nebeneffekt, dass es unter Umständen das Verhalten ändert wie Maven
      einen Artefakten findet. Sollte ein Projekt so konfiguriert sein, dass
      es Abhängigkeiten innerhalb eines Workspaces auflöst, müssen diese
      Artefakte nicht in Ihrem lokalen Repository vorhanden sein. Nehmen wir
      einmal an, Projekt A und Projekt B sind beide im gleichen Eclipse
      Workspace vorhanden. Ist Workspace Auflösung ausgestellt, so wird die
      Abhängigkeit nur aufgelöst, wenn die entsprechenden Artefakte in Ihrem
      lokalen Repository aufzufinden sind. Ist Workspace Auflösung hingegen
      aktiviert, so wird m2eclipse die Abhängigkeiten innerhalb Ihres
      Workspaces auflösen. In anderen Worten, ist Workspace Auflösung
      aktiviert, so müssen lokale Projekte nicht in Ihrem lokalen Repository
      vorhanden sein um sich aufeinander zu beziehen.</para>

      <para>Sie können auch das Abhängigkeitsmanagement ausschalten. Das hat
      dann den Nebeneffekt, dass es m2eclipse anweist, aufzugeben zu
      versuchen, den Projektklassenpfad zu verwalten, und wird den Maven
      Abhängigkeits Container aus Ihrem Projekt entfernen. Sollten Sie diese
      Option wählen, so sind Sie letztendlich mit der Verwaltung des
      Projektklassenpfades auf sich gestellt.</para>
    </section>
  </section>

  <section id="eclipse-sect-working-repos">
    <title>Arbeiten mit den Maven Repositorien</title>

    <para>m2eclipse bietet auch einige Werkzeuge um die Arbeit mit Maven
    Repositorien zu erleichtern. Insbesondere stehen Werkzeuge mit folgender
    Funktionalität bereit:</para>

    <para><itemizedlist>
        <listitem>
          <para>Suchen von Artefakten</para>
        </listitem>

        <listitem>
          <para>Suchen von Java Klassen</para>
        </listitem>

        <listitem>
          <para>Indexierung von Maven Repositorien</para>
        </listitem>
      </itemizedlist></para>

    <section id="eclipse-sect-searching-artifacts">
      <title>Suchen von Maven Artefakten sowie Java Klassen</title>

      <para>m2eclipse fügt dem Navigationsmenü von Eclipse weitere Einträge
      hinzu, welche die Suche nach Maven Artefakten sowie Java Klassen
      erleichtern. Diese Funktionalität wird durch einen Aufruf innerhalb des
      Menüs ausgelöst, und ist in <xref linkend="fig-eclipse-nav-search" />
      (Abbildung 14.21: "Suchen von Artefakten und Klassen")
      dargestellt:</para>

      <figure id="fig-eclipse-nav-search">
        <title>Suchen von Artefakten und Klassen</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_navigate.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Beachten Sie in <xref linkend="fig-eclipse-nav-search" />
      (Abbildung 14.21: "Suchen von Artefakten und Klassen") im
      Navigationsmenü von Eclipse die Einträge mit dem Titel:
      <guimenuitem>Öffnen eines Maven POM</guimenuitem> und <guimenu>Maven
      Typauswahl</guimenu>. Der Eintrag <guibutton>Öffnen eines Maven
      POM</guibutton> erlaubt Ihnen das Maven Repository nach einem bestimmten
      POM zu durchsuchen, wie in Abbildung <xref
      linkend="fig-eclipse-search-pom" /> (14.22: "Suche eines POM")
      ersichtlich ist:</para>

      <figure id="fig-eclipse-search-pom">
        <title>Suche eines POM</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_search-pom.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Nach der Auswahl eines Artefakts und der Bestätigung mit
      <guibutton>OK</guibutton> wird innerhalb von Eclipse das POM zur Ansicht
      und Modifikation geöffnet. Dies ist sehr hilfreich, wenn Sie das POM
      eines Artefakten zur schnellen Einsicht ansehen wollen.</para>

      <para>Der zweite Eintrag im Navigationsmenü von m2eclipse ist
      „<guibutton>Open Type from Maven</guibutton>“. Diese Funktion erlaubt es
      Ihnen in einem entfernten Repository nach Java Klassen zu suchen. Beim
      Öffnen des Dialogfensters geben Sie versuchsweise einmal
      ‚<varname>factory bean</varname>’ ein, und Sie werden sehen wie viele
      Klassen mit diesem Namen gefunden werden! Dies ist in <xref
      linkend="fig-eclipse-search-class" /> (Abbildung 14.23: "Durchsuchen
      eines Repository nach einer Java Klasse") dargestellt.</para>

      <figure id="fig-eclipse-search-class">
        <title>Durchsuchen eines Repository nach einer Java Klasse</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_search-class.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Dies ist eine grosse zeitliche Entlastung, denn bislang bedeutete
      die Suche nach einer Java Klasse eine zeitraubende Suche innerhalb der
      einzelnen Artefakte eines Repositories. Wenn Sie heute eine bestimmt
      Klasse suchen, starten Sie einfach Eclipse, gehen zum Navigationsmenü
      und suchen nach der entsprechenden Klasse. m2eclipse wird Ihnen eine
      Liste der Artefakte zurückgeben in welchem diese Klasse
      erscheint.</para>
    </section>

    <section id="eclipse-sect-indexing-repos">
      <title>Indizierung von Maven Repositorien</title>

      <para>Die Maven Index Anzeige erlaubt es Ihnen POMs in entfernten
      Repositorien anzuwählen und in Eclipse auszuwählen. Um dies zu
      demonstrieren, wählen Sie <guimenu>View</guimenu> &gt; <guisubmenu>Show
      View</guisubmenu> &gt; <guimenuitem>Other</guimenuitem>. Geben sie den
      Begriff „<varname>maven</varname>“ in die Suchmaske ein. Sie sollten wie
      in <xref linkend="fig-eclipse-show-indexes" /> (Abbildung 14.24:
      Anzeigen von Maven Indexen im Eclipse View") dargestellt ein View der
      bestehenden Artefakte zur Auswahl gestellt bekommen:</para>

      <figure id="fig-eclipse-show-indexes">
        <title>Anzeigen von Maven Indexen im Eclipse View</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_show-view.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Wählen Sie das entsprechende View aus und bestätigen Sie mit
      <guibutton>OK</guibutton>. Es wird sich das Maven Index View wie in
      <xref linkend="fig-eclipse-indexes-view" /> (Abbildung 14.25: "Maven
      Index View") dargestellt öffnen.</para>

      <figure id="fig-eclipse-indexes-view">
        <title>Maven Index View</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_indexes.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Zusätzlich in <xref linkend="fig-eclipse-indexes-find-pom" />
      (Abbildung 14.26: "Auswahl eines POM innerhalb des Index Views")
      dargestellt nach dem manuellen Suchen eines POM:</para>

      <figure id="fig-eclipse-indexes-find-pom">
        <title>Auswahl eines POM innerhalb des Index Views</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_index2.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Nach der Auswahl des <varname>apache-camel</varname> Artefakte
      wird ein Doppelclick dieses in Eclipse zur Bearbeitung öffnen.</para>

      <para>Diese Funktion erleichtert die Arbeit mit einem entfernten
      Repository wesentlich und spart darüber hinaus viel Zeit. Nach all der
      Zeit welche Sie in den vergangenen Jahren mit solcherlei Beschäftigungen
      zugebracht haben – Ansehen des Inhaltes eines Repositories in einem
      Webbrowser, Herunterladen des Artefaktes und anschiessenden Greppens
      nach Klassen oder POM – sie werden von m2eclipse angenehm überrascht
      sein.</para>
    </section>
  </section>

  <section id="eclipse-sect-pom-form">
    <title>Der neue graphische POM Editor</title>

    <para>Die neuste Inkarnation des m2eclipse Plugin beinhaltet einen
    graphischen POM Editor, welcher es erlaubt, alle Aspekte eines Projekt
    POMs in einer einfachen GUI Schnittstelle zu bearbeiten. Um den POM Editor
    zu öffnen, Klicken Sie auf eine <filename>pom.xml</filename> Datei.
    Sollten Sie eine benutzerdefinierte Einstellung eines Editors gewählt
    haben, und der graphische POM Editor nicht als Standardeditor bestimmt
    haben, so können Sie die Alternative „<guibutton>Open with … /Maven POM
    Editor</guibutton>“ wählen um diesen zu starten. Der POM Editor wird Ihnen
    dann die in <xref linkend="fig-eclipse-pom-edit-overview" /> (Abbildung
    14.27: "Übersichtsanzeige des POM Editors für das Projekt
    <classname>idiom-core</classname>") dargestellte Gesamtübersicht
    anzeigen.</para>

    <para>Eine häufige Klage bezüglich Maven ist, dass Maven den Entwickler
    dazu zwingt sich des öfteren mit langen, unübesichtlichen und hoch
    komplexen XML Dokumenten zu befassen, wie diese in einem multi modularen
    Build vorkommen. Wärend wir, die Autoren davon überzeugt sind, dass dies
    ein kleiner Preis für all die Möglichkeiten und Flexibilität welche Maven
    bietet ist, so erlaubt der graphische POM Editor die Arbeit mit Maven ohne
    die das POM untermauernde XML Struktur überhaupt zu kennen.</para>

    <figure id="fig-eclipse-pom-edit-overview">
      <title>Übersichtsanzeige des POM Editors für das Projekt
      <classname>idiom-core</classname></title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_pom-editor.png" scalefit="1" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Das in <xref linkend="fig-eclipse-pom-edit-overview" /> (Abbildung
    14.27: "Übersichtsanzeige des POM Editors für das Projekt idiom-core")
    dargestellte Projekt besitzt einen Artefakten:
    <classname>idiom-core</classname>. Es besteht keine
    <varname>groupId</varname> oder <varname>version</varname>, und Angaben
    zur SCM Verwaltung sind ebenfalls nicht gesetzt. Dies rührt daher, dass
    <classname>idiom-core</classname> die allermeisten Informationen vom
    übergeordneten Projekt <classname>idom</classname> erbt. Öffnen wir das
    <filename>pom.xml</filename> des elterlichen Projekts im graphischen
    Editor, so würden wir die Anzeige wie in <xref
    linkend="fig-eclipse-pom-editor-overview-parent" /> (Abbildung 14.28:
    "Übersichtsansicht des graphischen Editors des übergeordneten
    <classname>idiom</classname> Projekts") sehen.</para>

    <para>Das Symbol des "<emphasis>geöffneten Ordners</emphasis>" an
    zahlreichen Einträgen des POM Editors zeigt an, dass der entsprechende
    Eintrag ebenfalls Teil des Eclipse-Workspace ist, und das Jar-Symbol
    deutet auf Artefakte welche sich auf ein Maven Repository beziehen. Sie
    können einen solche Eintrag doppelklicken um sich dessen POM Datei im POM
    Editor anzuzeigen. Dies funktioniert für Module, Abhängigkeiten, Plugins
    sowie weiteren Artefakten, welche entsprechende Maven Artefakte aufweisen.
    Unterstrichene Titel in den Seiten des POM Editors weisen auf Hyperlinks
    hin, welche benutzt werden können um Maven Artefakte ebenfalls im POM
    Editor zu öffnen.</para>

    <figure id="fig-eclipse-pom-editor-overview-parent">
      <title>Übersichtsansicht des graphischen Editors des übergeordneten
      <classname>idiom</classname> Projekts</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_pom-editor-parent.png"
                     scalefit="1" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>In diesem übergeordneten POM ersichtlich die
    <varname>groupId</varname> und <varname>version</varname>. Beachten Sie
    bitte, dass ein Grossteil der Detailinformationen welche im POM von
    <classname>idiom-core</classname> fehlten, hier gesetzt werden. Die
    Anzeige des POM Editors beschränkt sich auf Angaben welche im jeweiligen
    POM gemacht wurden und zeigt keine geerbten Werte. Sollten Sie dennoch das
    tatsächliche POM des Projektes ansehen wollen, so nutzen Sie die
    Möglichkeit „tatsächliches POM anzeigen“ von der Toolbar an der oberen
    rechten Ecke des POM Editors (linke Klammer und Gleichzeichen über dem
    blauen Maven Projekt M). Es wird Ihnen das tatsächliche POM wie in <xref
    linkend="fig-eclipse-pom-editor-effective" /> (Abbildung 14.29:
    "Tatsächliches POM von <classname>idiom-core</classname>") dargestellt,
    angezeigt.</para>

    <figure id="fig-eclipse-pom-editor-effective">
      <title>Tatsächliches POM von <classname>idiom-core</classname></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_pom-editor-effective.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>In der Ansicht „Tatsächliches POM“ von
    <classname>idiom-core</classname> wird das ursprüngliche POM mit den POM
    der ‚Vorfahren’ (übergeordnet (Eltern), darüber (Grosseltern), etc.)
    ähnlich zum Aufruf ‚<command>mvn help:effective-pom</command>’
    verschmolzen und dargestellt. Da diese Ansicht nun die Kombination vieler
    verschiedener abhängiger POM ist, ist diese Darstellung schreibgeschützt
    und Sie werden in dieser Ansicht keine Änderungen vornehmen können.</para>

    <para>In der Ansicht des POM Editors wie in <xref
    linkend="fig-eclipse-pom-edit-overview" /> (Abbildung 14.27:
    "Übersichtsanzeige des POM Editors für das Projekt
    <classname>idiom-core</classname>") dargestellt, können Sie ebenfalls die
    Ansicht des übergeordneten POM aufrufen. Wählen Sie
    „<guibutton>Übergeordnetes POM öffnen</guibutton>" von der Toolbar an der
    oberen rechten Ecke des POM Editors (gelber Pfeil nach oben).</para>

    <para>Der POM Editor bietet eine Anzahl verschieden Ansichten der
    Informationen des POM, im letzten Tab des Editors können Sie die
    darunterliegende XML-Datei ansehen. Ebenfalls Vorhanden ist ein Tab
    bezüglich Abhängigkeiten, dargestellt in <xref
    linkend="fig-eclipse-pom-editor-dependencies" /> (Abbildung 14.30:
    "Abhängigkeitsansicht des POM Editors"). Dieses gibt Ihnen eine einfache
    Möglichkeit Abhängigkeiten zu verwalten, sowie den Abschnitt
    dependencyManagement des POM zu editieren. Die Abhängigkeitsverwaltung
    integriert ebenfalls die Artefakt Suchfunktion des m2eclipse Plugins. Beim
    Arbeiten in den Feldern der Abhängigkeiten können Sie auf Aktionen aus den
    Editorfeldern oder auch Ctrl + Leertaste Hilfestellungen
    zurückgreifen.</para>

    <para>Müssen Sie einmal weitere Details über bestimmte Artefakte in
    Erfahrung bringen, so können Sie die Funktion „Webseite öffnen von
    innerhalb des Abhängigkeiten aufrufen, um eine entsprechenden Webseite
    aufzurufen.</para>

    <figure id="fig-eclipse-pom-editor-dependencies">
      <title>Abhängigkeitsansicht des POM Editors</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_pom-editor-dependencies.png"
                     scalefit="1" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Der Build Tab, dargestellt in <xref
    linkend="fig-eclipse-pom-editor-build" /> (Abbildung 14.31: "Build Tab des
    POM Editors") gibt Ihnen Zugriff auf den Abschnitt der Build Elemente. Aus
    diesem Tab heraus können Sie die benutzten Verzeichnisse, Erweiterungen
    sowie Standard Goal-Namen sowie Ressource-Verzeichnisse bestimmen.</para>

    <figure id="fig-eclipse-pom-editor-build">
      <title>Build Tab des POM Editors</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_pom-editor-build.png"
                     scalefit="1" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Wir haben hier nur eine Untermenge der Funktionalität des POM
    Editors aufgezeigt. Sollten Sie an weiteren Informationen interessiert
    sein, so laden Sie sich doch bitte das m2eclipse Plugin herunter und
    installieren Sie es.</para>
  </section>

  <section id="eclipse-sect-analyze-depend">
    <title>Projektabhängigkeiten mit m2eclipse analysieren</title>

    <para>Die neueste Version des m2eclipse Plugin umfasst unter anderem auch
    eine Editor Version mit zusätzlichen Abhängigkeitsanalyse-Werkzeugen.
    Diese werden die Art, wie Abhängigkeiten verwaltet werden, grundsätzlich
    ändern. Eine der grundlegenden Eigenschaften warum Maven zum Einsatz kommt
    ist die Art und Weise wie Abhängigkeiten verwaltet werden. Nehmen Sie an,
    Sie schreiben an einer Applikation welche auf der <classname>Spring
    Hibernate3 </classname>Integration aufbaut, alles was Sie tun müssen ist,
    sich auf den Artefakten <classname>spring-hibernate3</classname> des
    zentralen Maven Repository abzustützen. Maven wird dieses Artefakt
    einlesen und alle weiteren transitiven Abhängigkeiten zufügen. Während
    dies eine Funktionalität ist, welche viele Anwender zum Einsatz von Maven
    lockt, so kann es eben auch verwirrend werden, sobald ein Projekt auf
    dutzenden von Abhängigkeiten aufbaut, und diese jeweils weitere duzende
    Transitive Abhängigkeiten mit sich bringen.</para>

    <para>Probleme treten vor allem dann auf, wenn Sie von einem Projekt
    abhängen, dessen POM uvollständig ist, insbesondere wenn Abhängigkeiten
    nicht ausreichend definiert und als optional gekennzeichnet sind, oder
    sobald es Konflikte zwischen transitiven Abhängigkeiten gibt. Im Falle,
    dass eine der Voraussetzungen der Ausschluss von
    <classname>commons-logging</classname> oder des <classname>Servlet
    API</classname> ist, oder im Falle dass Sie herausfinden müssen warum in
    einem bestimmten Gültigkeitsbereich eine bestimmte Abhängigkeit auftritt,
    werden Sie regelmässig gezwungen sein, auf die Kommandozeilen Werkzeuge
    <varname>dependency:tree</varname> und
    <varname>dependency:resolve</varname> zurückzugreifen.</para>

    <para>Das sind die Momente, in denen Ihnen der neue POM Editor des
    m2eclipse Plugin zur Hilfe kommt. Wenn Sie ein Projekt mit vielen
    Abhängigkeiten öffnen, so werden Sie die zweispaltige Darstellung der
    Abhängigkeiten wie in <xref
    linkend="fig-eclipse-pom-editor-dependency-tree" /> (Abbildung 14.32:
    "Baum der Abhängigkeiten dargestellt im POM Editor") sehen. Die linke
    Spalte der Anzeige veranschaulicht den Baum der Abhängigkeiten. Die erste
    Ebene stellt hierbei die direkten Abhängigkeiten zu Ihrem Projekt dar.
    Jede weitere Ebene ist dabei die nächste Stufe der Hierarchie. Die linke
    Spalte hingegen gibt Ihnen ein einfaches Werkzeug zur Hand um
    herauszufinden wie eine bestimmte Abhängigkeit in Ihr Projekt gefunden
    hat. Die rechte Anzeige Zeigt Ihnen alle aufgelösten Abhängigkeiten an;
    das stellt die tatsächliche Liste der Abhängigkeiten dar, nach der
    Auflösung aller Konflikte sowie Anwendung aller Gültigkeitsbereiche und
    stellt somit die Liste der Abhängigkeiten dar, wie Sie Ihr Projekt zur
    Kompilierung, Test und Paketierung benutzen wird.</para>

    <figure id="fig-eclipse-pom-editor-dependency-tree">
      <title>Baum der Abhängigkeiten dargestellt im POM Editor</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_pom-editor-depend-tree.png"
                     scalefit="1" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Die Funktionalität welche den Tab Abhängigkeiten so wertvoll macht
    ist, dass es bei Nachforschungen nachvollziebar ist, wie eine bestimmte
    Abhängigkeit in die Liste der Abhängigkeiten gekommen ist. Such- und
    Filter- Funktionalitäten welche dem Editor zur Verfügung stehen machen es
    ein leichtes die Projektabhängigkeiten zu bearbeiten. Sie können das Suche
    Feld der Eingabefelder sowie die Aktivitäten Sortieren und Filtern der
    Abhängigkeits-Hierarchie und der Aufgelösten Abhängigkeiten einsetzen, um
    sich durch die Abhängigkeiten zu hangeln. <xref
    linkend="fig-eclipse-pom-editor-locate-depend" /> (Abbildung 14.33:
    "Lokalisieren von Abhängigkeiten im Abhängigkeitsbaum") stellt dar, was
    passiert, wenn man die Abhängigkeit <classname>commons-logging</classname>
    in der Liste der Aufgelösten Abhängigkeiten auswählt. Sollte Filterung auf
    der Abhängigkeitshierarchie der linken Seite eingestellt sein, so wird die
    Auswahl einer Abhängigkeit auf der rechten Seite automatisch alle die
    Knoten des Abhängigkeitsbaumes anzeigen, welche zu deren Inklusion geführt
    haben. Sollte Sie versuchen eine bestimmte Abhängigkeit loszuwerden, so
    wird Ihnen dieses Werkzeug helfen herauszufinden, welche Abhängigkeiten
    (eben auch transitive Abhängigkeiten) dazu beitragen, dass eine bestimmte
    Abhängigkeit aufgelöst wurde. In anderen Worten, sollten Sie einen
    Artefakten wie z.B. <classname>commons-logging </classname>von Ihrer Liste
    der Abhängigkeiten löschen wollen, werden Sie hierzu das
    Abhängigkeits-Werkzeug benutzen wollen.</para>

    <figure id="fig-eclipse-pom-editor-locate-depend">
      <title>Lokalisieren von Abhängigkeiten im Abhängigkeitsbaum</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_pom-editor-depend-tree-locate.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Das m2eclipse Plugin bietet Ihnen des Weiteren auch die Möglichkeit
    den Baum der Abhängigkeiten graphisch darzustellen. <xref
    linkend="fig-eclipse-pom-editor-graph" /> (Abbildung 14.34: "Darstellung
    eines Projektes als Graphen"), stellt die Abhängigkeiten des
    <classname>idiom-core</classname> Projekts dar. Die aller oberste Box
    stellt das <classname>idiom-core</classname> Projekt dar, alle
    darunterliegenden Abhängigkeiten sind sinngemäss darunter dargestellt.
    Direkte Abhängigkeiten sind durch direkte Verbindungen gekennzeichnet,
    transitive Abhängigkeiten gehen von andren Abhängigkeiten aus. Sie können
    jede beliebige Abhängigkeit auswählen, um die Verbindungen hervorzuheben,
    oder sie können mit dem Suche Werkzeug im oberen Bereich der Seite die
    entsprechenden Knoten finden.</para>

    <para>Beachten Sie bitte auch das Symbol des “<emphasis>offenen
    Ordners</emphasis>” für diejenigen Artefakte welche lokal vorliegen, und
    das Symbol der Jar Datei für Artefakte welche auf ein Maven-Repository
    zeigen.</para>

    <figure id="fig-eclipse-pom-editor-graph">
      <title>Darstellung eines Projektes als Graphen</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_pom-editor-graph.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Der dargestellt Graph kann durch Rechtsklicken der Maustaste
    geändert werden. Sie können ebefalls Einstellen, ob Sie die
    <varname>artifactId</varname>, <varname>groupId</varname>,
    <varname>version</varname> sowie Gültigkeitsbereich dargestellt haben
    möchten, und ob der Text in der Zeile umgebrochen werden soll.<xref
    linkend="fig-eclipse-pom-editor-graph-radial" /> (Abbildung 14:35 "Radiale
    Darstellung des Abhängigkeitsgraphen") stellt den gleichen Graphen aus
    <xref linkend="fig-eclipse-pom-editor-graph" /> (Abbildung 14.34) in einem
    anderen Layout dar.</para>

    <figure id="fig-eclipse-pom-editor-graph-radial">
      <title>Radiale Darstellung des Abhängigkeitsgraphen</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_pom-editor-graph-radial.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="eclipse-sect-maven-preferences">
    <title>Maven Einstellungen</title>

    <para>Die Möglichkeit, Maven Grundeinstellungen sowie einige Optionen zu
    setzen, ist ein wichtiger Aspekt an der Arbeit mit Maven. m2eclipse bietet
    die Möglichkeit diese Einstellungen in der Maven Einstellungen Seite
    innerhalb von Eclipse zu setzen. Typischerweise, beim Einsatz von Maven
    von der Befehlszeile, werden diese Einstellungen als Optionen übergeben
    oder aus dem Verzeichnis ~/.m2 ausgelesen. m2eclipse bietet Zugriff auf
    die wichtigsten Einstellungen von innerhalb der IDE. <xref
    linkend="fig-eclipse-maven-preferences" /> (Abbildung 14.36 "Maven
    Einstellungen in Eclipse") stellt die Einstellungsseite innerhalb von
    Eclipse dar:</para>

    <figure id="fig-eclipse-maven-preferences">
      <title>Maven Einstellungen in Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_preferences.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Die Tick-Boxen im oberen Bereich erlauben:</para>

    <para><itemizedlist>
        <listitem>
          <para>Maven im Offline Modus zu betreiben, d.h. ohne Zugriff auf
          entfernte Repositorien</para>
        </listitem>

        <listitem>
          <para>Debug Ausgaben auf die Maven Konsole umleiten</para>
        </listitem>

        <listitem>
          <para>Quell-Jar Dateien von Artefakten aus entfernten Repositorien
          herunterladen</para>
        </listitem>

        <listitem>
          <para>JavaDoc von Artefakten aus entfernten Repositorien
          herunterladen</para>
        </listitem>

        <listitem>
          <para>Indexe von entfernten Repositorien beim Start herunterladen
          und aufzufrischen.</para>
        </listitem>
      </itemizedlist></para>

    <para>Der nächste Abschnitt erlaubt in einem Fenster die Auswahl der
    auszuführenden Goals wann immer ein Projekt importiert wird und auch
    sobald Quellverzeichnisse eines gegebenen Projektes geändert werden. Das
    Standard Goal ist <varname>process-ressources</varname>, welches die
    Ressourcen eines Projektes in das Zielverzeichnis kopiert und das Projekt
    zur Paketierung vorbereitet. Diese Auswahl anzupassen ist hilfreich,
    sollten sie benutzerdefinierte Goals aufrufen um Ressourcen zu verarbeiten
    oder unterstützende Konfigurationen zu generieren.</para>

    <para>Sollten Sie Hilfe brauchen, ein bestimmtes Goal auszuwählen, so
    drücken sie den <guibutton>Select …</guibutton> Auswahlknopf um den
    „Goals“ Dialog aufzurufen. Das linke Fenster aus <xref
    linkend="fig-eclipse-goal-lifecycle" /> (Abbildung 14.37: "Maven Goal
    Dialogfenster") gibt die Auflistung aller Maven Standardlebenszyklen
    wieder.</para>

    <figure id="fig-eclipse-goal-lifecycle">
      <title>Maven Goal Dialogfenster</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_preference-goals.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Es ist gut möglich, dass Sie beim Anblick der vielen verfügbaren
    Goals überwältigt sind. Es bestehen buchstäblich hunderte Maven Plugins
    für alles Mögliche, von der Generierung der Datenbank Struktur, über das
    Durchführen von Integrationstests, das Durchführen von statischen Analysen
    bis hin zur Generierung von Web Services mittels XFire. Der Goals-Dialog
    bietet mehr als 200 Plugins mit auswählbaren Goals. Das Fenster der
    rechten Seite der <xref linkend="fig-eclipse-goal-lifecycle" /> (Abbildung
    14.37: "Maven Goal Dialogfenster") stellt z.B. die angebotenen Goals des
    Tomcat Maven Plugin dar. Mittels der Maske Suchen können Sie wie gewohnt
    die Liste reduzieren. m2eclipse wird während Sie die Eingabe vornehmen die
    Liste gemäss Ihrer Auswahl anpassen.</para>

    <para>Eine weitere Option ist die Anzeige der Maven Installationen
    Konfiguration wie diese in <xref
    linkend="fig-eclipse-maven-installations" /> (Abbildung 14.38: "Maven
    Installationen Auswahl Anzeige") dargestellt ist:</para>

    <figure id="fig-eclipse-maven-installations">
      <title>Maven Installationen Auswahl Anzeige</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_preferences2.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Auf dieser Seite können Sie weitere Maven Installationen Ihrer
    Eclipse Umgebung zufügen. Sollten Sie eine von der mitgelieferten
    verschiedene Maven Version benutzen wollen, so können Sie auf dieser Seite
    verschiedene Versionen konfigurieren. Die Funktionalität ist ähnlich der,
    der Java Virtuellen Maschine (JVM) Konfiguration innerhalb von Eclipse.
    Eine eingebettete Version von Maven, bekannt unter dem Titel Maven
    Embedder ist bereits gesetzt. Diese wird benutzt um Maven innerhalb von
    Eclipse auszuführen. Sollten Sie eine andere Installation neben der von
    Embedder angebotenen einsetzen wollen, können Sie diese mittels des
    <guibutton>Add</guibutton> Buttons zufügen. Abbildung <xref
    linkend="fig-eclipse-maven-installations" /> (14.38: "Maven Installationen
    Auswahl Anzeige") zeigt die Konfiguration mit <classname>Maven
    Embedder</classname>, <varname>Maven 2.0.9</varname> sowie Maven
    <varname>2.1-SNAPSHOT</varname>.</para>

    <para>Die Maven Installationen Auswahl Anzeige erlaubt Ihnen ebenfalls die
    Dateien der lokalen sowie globalen Einstellungen, der
    <filename>settings.xml </filename>Dateien zu setzen. Sollten Sie den Ort
    dieser Dateien nicht spezifizieren, so geht Maven davon aus, das es die
    globalen Einstellungen unter <filename>conf/settings.xml</filename> der
    ausgewählten Maven Installation findet. Sie können ebenfalls den Ort der
    Datei der benutzerdefinierten Einstellungen von
    <filename>~/.m2/settings.xml</filename> umdefinieren, sowie den Ort des
    lokalen Maven Repository unterschiedlich von
    <filename>~/.m2/repositroy</filename> definieren.</para>

    <para>Ebenfalls zur Auswahl in den Einstellungen von Eclipse steht die
    Möglichkeit Maven Version Dekoratoren einzustellen. Diese Einstellung gibt
    die Möglichkeit die aktuelle Version eines Artefakten im Eclipse Package
    Explorers dazustellen und wird in <xref
    linkend="fig-eclipse-mvn-decorate" /> (Abbildung 14.39 "Einstellen der
    Maven Versions-Dekoratoren") dargestellt.</para>

    <figure id="fig-eclipse-mvn-decorate">
      <title>Einstellen der Maven Versions-Dekoratoren</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_decorate.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Um diese Einstellung zu aktivieren, wählen Sie einfach den Maven
    Version Dekorator Tick wie in <xref linkend="fig-eclipse-mvn-decorate" />
    (Abbildung 14.39: "Einstellen der Maven Versions-Dekoratoren") dargestellt
    aus. Sollte dies nicht ausgewählt sein, so wird das Projekt lediglich mit
    dem Namen sowie dem relativen Pfad innerhalb des Package Explorers
    dargestellt, wie in <xref linkend="fig-eclipse-no-decorate" /> (Abbildung
    14.40 "Package Explorer ohne Maven Versions-Dekoratoren") zu sehen:</para>

    <figure id="fig-eclipse-no-decorate">
      <title>Package Explorer ohne Maven Versions-Dekoratoren</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_decorate2.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Sobald die Maven Versions-Dekoratoren zugeschaltet sind, wird dem
    Projektnamen die aktuelle Projektversion zugefügt wie dies in <xref
    linkend="fig-eclipse-decorated" /> (Abbildung 14.41: "Package Explorer mit
    zugeschalteten Maven Versions-Dekoratoren"):</para>

    <figure id="fig-eclipse-decorated">
      <title>Package Explorer mit zugeschalteten Maven
      Versions-Dekoratoren</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_decorate3.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Diese nützliche Funktion erlaubt doch auf einen Blick die
    eingebundenen Projekt Versionen zu überblicken, ohne den Umweg über das
    POM einzuschlagen.</para>
  </section>

  <section id="eclipse-sect-summary">
    <title>Zusammenfassung</title>

    <para>m2eclipse ist mehr als nur ein Plugin welches die Unterstützung für
    Maven innerhalb von Eclipse bereitstellt. Vielmehr ist es eine umfassende
    Integration welche den Umgang beginnend mit dem Erstellen eines Projektes
    bis hin zum Herausfinden von impliziten Abhängigkeiten um Längen
    vereinfacht. m2eclipse ist ein erster Schritt in die Richtung einer
    Entwicklungsumgebung, welche den reichen semantischen Fundus des zentralen
    Maven Repositorien nutzt. Mit der Verbreitung des m2eclipse Plugin werden
    viele weitere Archetypen veröffentlicht werden, und weitere Projekte
    werden Wert darin sehen, deren Artefakte ins zentrale Maven Repository zu
    publizieren. Sollten Sie bereits zuvor versucht haben Eclipse und Maven -
    ohne die Hilfe eines Werkzeuges welches versteht mit den hierarchischen
    Abhängigkeiten umzugehen – zu benutzen, so können Sie einschätzen wie
    wichtig und zentral die saubere Integration ist, welche ein Arbeiten mit
    verschachtelten Projekten ermöglicht, welche multi-modulare Projekte mit
    sich bringen.</para>
  </section>
</chapter>
